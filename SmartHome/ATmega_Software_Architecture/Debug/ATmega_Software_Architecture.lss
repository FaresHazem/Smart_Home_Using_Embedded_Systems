
ATmega_Software_Architecture.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00001c9c  00001d30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800168  00800168  00001e38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  00001ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000041dc  00000000  00000000  0000221c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000142f  00000000  00000000  000063f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023e9  00000000  00000000  00007827  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a40  00000000  00000000  00009c10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001329  00000000  00000000  0000a650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000290c  00000000  00000000  0000b979  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  0000e285  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__vector_1>
       8:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__vector_2>
       c:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__vector_10>
      2c:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "../APP/SmartHome_V2/Home_Interface.h"


int main(void){
	
	DIO_enuSetPinMode(DIO_GROUP_D, DIO_PIN_5, DIO_OUTPUT);
      92:	41 e0       	ldi	r20, 0x01	; 1
      94:	65 e0       	ldi	r22, 0x05	; 5
      96:	83 e0       	ldi	r24, 0x03	; 3
      98:	0e 94 20 08 	call	0x1040	; 0x1040 <DIO_enuSetPinMode>
	DIO_enuSetPinMode(DIO_GROUP_D, DIO_PIN_4, DIO_OUTPUT);
      9c:	41 e0       	ldi	r20, 0x01	; 1
      9e:	64 e0       	ldi	r22, 0x04	; 4
      a0:	83 e0       	ldi	r24, 0x03	; 3
      a2:	0e 94 20 08 	call	0x1040	; 0x1040 <DIO_enuSetPinMode>
	DIO_enuSetPinMode(DIO_GROUP_B, DIO_PIN_6, DIO_OUTPUT);
      a6:	41 e0       	ldi	r20, 0x01	; 1
      a8:	66 e0       	ldi	r22, 0x06	; 6
      aa:	81 e0       	ldi	r24, 0x01	; 1
      ac:	0e 94 20 08 	call	0x1040	; 0x1040 <DIO_enuSetPinMode>
	Home_enuInit();
      b0:	0e 94 7c 00 	call	0xf8	; 0xf8 <Home_enuInit>
	//SmartHome_enuStartSystem();
	while(1){
		Home_enuStart();
      b4:	0e 94 87 03 	call	0x70e	; 0x70e <Home_enuStart>
      b8:	fd cf       	rjmp	.-6      	; 0xb4 <main+0x22>

000000ba <Servo_Map>:
u8 Home_u8_Screen_Counter = 0;
u8 Home_u8_Wrong_Pass_Counter = 0;

u8 Servo_Map(u8 angle) {
	if (angle < 0) angle = 0;
	if (angle > 180) angle = 180;
      ba:	85 3b       	cpi	r24, 0xB5	; 181
      bc:	08 f0       	brcs	.+2      	; 0xc0 <Servo_Map+0x6>
      be:	84 eb       	ldi	r24, 0xB4	; 180
	
	return (u8)(((f32)angle / 180.0) * (64 - 9) + 9);
      c0:	68 2f       	mov	r22, r24
      c2:	70 e0       	ldi	r23, 0x00	; 0
      c4:	80 e0       	ldi	r24, 0x00	; 0
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__floatunsisf>
      cc:	20 e0       	ldi	r18, 0x00	; 0
      ce:	30 e0       	ldi	r19, 0x00	; 0
      d0:	44 e3       	ldi	r20, 0x34	; 52
      d2:	53 e4       	ldi	r21, 0x43	; 67
      d4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__divsf3>
      d8:	20 e0       	ldi	r18, 0x00	; 0
      da:	30 e0       	ldi	r19, 0x00	; 0
      dc:	4c e5       	ldi	r20, 0x5C	; 92
      de:	52 e4       	ldi	r21, 0x42	; 66
      e0:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__mulsf3>
      e4:	20 e0       	ldi	r18, 0x00	; 0
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	40 e1       	ldi	r20, 0x10	; 16
      ea:	51 e4       	ldi	r21, 0x41	; 65
      ec:	0e 94 13 0c 	call	0x1826	; 0x1826 <__addsf3>
      f0:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__fixunssfsi>
      f4:	86 2f       	mov	r24, r22
}
      f6:	08 95       	ret

000000f8 <Home_enuInit>:

ES Home_enuInit(){
	
	LED_enuInit();
      f8:	0e 94 ca 07 	call	0xf94	; 0xf94 <LED_enuInit>
	LCD_enuInit();
      fc:	0e 94 1d 06 	call	0xc3a	; 0xc3a <LCD_enuInit>
	Timer0_enuInit();
     100:	0e 94 9d 0a 	call	0x153a	; 0x153a <Timer0_enuInit>
	PWM_enuInit();
     104:	0e 94 94 0b 	call	0x1728	; 0x1728 <PWM_enuInit>
	Timer2_enuInit();
     108:	0e 94 ed 0b 	call	0x17da	; 0x17da <Timer2_enuInit>
	KEYPAD_enuInit();
     10c:	0e 94 b9 03 	call	0x772	; 0x772 <KEYPAD_enuInit>
	
	return ES_OK;
}
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	08 95       	ret

00000114 <enuLedSystem>:

ES enuLedSystem(u8 copy_u8_led_id){
	LED_enuToggle(copy_u8_led_id);
     114:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <LED_enuToggle>
	return ES_OK;		
}
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	08 95       	ret

0000011c <enuServoSystem>:


ES enuServoSystem(u8 copy_u8_servo_id, u8 copy_u8_angle){
     11c:	cf 93       	push	r28
     11e:	c8 2f       	mov	r28, r24
     120:	86 2f       	mov	r24, r22
	
	u8 local_u8_duty_cycle = Servo_Map(copy_u8_angle);
     122:	0e 94 5d 00 	call	0xba	; 0xba <Servo_Map>
	
	if(copy_u8_servo_id == 1){
     126:	c1 30       	cpi	r28, 0x01	; 1
     128:	29 f4       	brne	.+10     	; 0x134 <enuServoSystem+0x18>
		//Servo at oc1A
		PWM_enuGeneratePWM_FixedFreq(local_u8_duty_cycle, 0);
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	0e 94 c3 0b 	call	0x1786	; 0x1786 <PWM_enuGeneratePWM_FixedFreq>
		Timer2_enuGeneratePWM(local_u8_duty_cycle);
		
	}else{
		return ES_NOK;
	}
	return ES_OK;
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	0f c0       	rjmp	.+30     	; 0x152 <enuServoSystem+0x36>
	
	if(copy_u8_servo_id == 1){
		//Servo at oc1A
		PWM_enuGeneratePWM_FixedFreq(local_u8_duty_cycle, 0);
		
	}else if (copy_u8_servo_id == 2){
     134:	c2 30       	cpi	r28, 0x02	; 2
     136:	31 f4       	brne	.+12     	; 0x144 <enuServoSystem+0x28>
		//Servo at oc1B
		PWM_enuGeneratePWM_FixedFreq(0, local_u8_duty_cycle);
     138:	68 2f       	mov	r22, r24
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	0e 94 c3 0b 	call	0x1786	; 0x1786 <PWM_enuGeneratePWM_FixedFreq>
		Timer2_enuGeneratePWM(local_u8_duty_cycle);
		
	}else{
		return ES_NOK;
	}
	return ES_OK;
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	07 c0       	rjmp	.+14     	; 0x152 <enuServoSystem+0x36>
		
	}else if (copy_u8_servo_id == 2){
		//Servo at oc1B
		PWM_enuGeneratePWM_FixedFreq(0, local_u8_duty_cycle);
		
	}else if (copy_u8_servo_id == 3){
     144:	c3 30       	cpi	r28, 0x03	; 3
     146:	21 f4       	brne	.+8      	; 0x150 <enuServoSystem+0x34>
		Timer2_enuGeneratePWM(local_u8_duty_cycle);
     148:	0e 94 01 0c 	call	0x1802	; 0x1802 <Timer2_enuGeneratePWM>
		
	}else{
		return ES_NOK;
	}
	return ES_OK;
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	01 c0       	rjmp	.+2      	; 0x152 <enuServoSystem+0x36>
		
	}else if (copy_u8_servo_id == 3){
		Timer2_enuGeneratePWM(local_u8_duty_cycle);
		
	}else{
		return ES_NOK;
     150:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ES_OK;
}
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <enuHomeWelcomeScreen>:

ES enuHomeWelcomeScreen(){
     156:	cf 93       	push	r28
	
	LCD_enuSendCommand(LCD_CLEAR_DISPLAY);				//Clear the display
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_enuSendCommand>
	LCD_enuSendCommand(LCD_CURSOR_OFF);					//Remove the cursor
     15e:	8c e0       	ldi	r24, 0x0C	; 12
     160:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_enuSendCommand>
	LCD_enuSetCursor(ROW1, COL6);
     164:	66 e0       	ldi	r22, 0x06	; 6
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	Timer0_enuPolling_SetTimer(100);
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	88 ec       	ldi	r24, 0xC8	; 200
     172:	92 e4       	ldi	r25, 0x42	; 66
     174:	0e 94 b1 0a 	call	0x1562	; 0x1562 <Timer0_enuPolling_SetTimer>
	LCD_enuSendString("Welcome");                       //Print welcome on the LCD
     178:	83 e8       	ldi	r24, 0x83	; 131
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	Timer0_enuPolling_SetTimer(300);
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	70 e0       	ldi	r23, 0x00	; 0
     184:	86 e9       	ldi	r24, 0x96	; 150
     186:	93 e4       	ldi	r25, 0x43	; 67
     188:	0e 94 b1 0a 	call	0x1562	; 0x1562 <Timer0_enuPolling_SetTimer>
	LCD_enuSetCursor(ROW2, COL1);
     18c:	61 e0       	ldi	r22, 0x01	; 1
     18e:	82 e0       	ldi	r24, 0x02	; 2
     190:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("Loading");                       //Loading Phase
     194:	8b e8       	ldi	r24, 0x8B	; 139
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	Timer0_enuPolling_SetTimer(500);
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	70 e0       	ldi	r23, 0x00	; 0
     1a0:	8a ef       	ldi	r24, 0xFA	; 250
     1a2:	93 e4       	ldi	r25, 0x43	; 67
     1a4:	0e 94 b1 0a 	call	0x1562	; 0x1562 <Timer0_enuPolling_SetTimer>
	LCD_enuSetCursor(ROW2, COL8);
     1a8:	68 e0       	ldi	r22, 0x08	; 8
     1aa:	82 e0       	ldi	r24, 0x02	; 2
     1ac:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	for(u8 i = 0; i < 9; i++){
     1b0:	c0 e0       	ldi	r28, 0x00	; 0
     1b2:	0a c0       	rjmp	.+20     	; 0x1c8 <enuHomeWelcomeScreen+0x72>
		LCD_enuSendData('-');
     1b4:	8d e2       	ldi	r24, 0x2D	; 45
     1b6:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_enuSendData>
		Timer0_enuPolling_SetTimer(150);
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	86 e1       	ldi	r24, 0x16	; 22
     1c0:	93 e4       	ldi	r25, 0x43	; 67
     1c2:	0e 94 b1 0a 	call	0x1562	; 0x1562 <Timer0_enuPolling_SetTimer>
	Timer0_enuPolling_SetTimer(300);
	LCD_enuSetCursor(ROW2, COL1);
	LCD_enuSendString("Loading");                       //Loading Phase
	Timer0_enuPolling_SetTimer(500);
	LCD_enuSetCursor(ROW2, COL8);
	for(u8 i = 0; i < 9; i++){
     1c6:	cf 5f       	subi	r28, 0xFF	; 255
     1c8:	c9 30       	cpi	r28, 0x09	; 9
     1ca:	a0 f3       	brcs	.-24     	; 0x1b4 <enuHomeWelcomeScreen+0x5e>
		LCD_enuSendData('-');
		Timer0_enuPolling_SetTimer(150);
	}
	return ES_OK;
}
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	cf 91       	pop	r28
     1d0:	08 95       	ret

000001d2 <enuHomePortalMaster>:

ES enuHomePortalMaster(u8 copy_u8_portal, void *copy_pvid_functionPtr()){
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	1f 92       	push	r1
     1d8:	cd b7       	in	r28, 0x3d	; 61
     1da:	de b7       	in	r29, 0x3e	; 62
     1dc:	18 2f       	mov	r17, r24
     1de:	7b 01       	movw	r14, r22
	u8 local_u8_value;
	boolean local_bool_reading = True;

	LCD_enuSendCommand(LCD_CLEAR_DISPLAY);
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_enuSendCommand>
	LCD_enuSetCursor(ROW1, COL1);
     1e6:	61 e0       	ldi	r22, 0x01	; 1
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("1-Open");
     1ee:	83 e9       	ldi	r24, 0x93	; 147
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	LCD_enuSetCursor(ROW1, COL9);
     1f6:	69 e0       	ldi	r22, 0x09	; 9
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("2-Close");
     1fe:	8a e9       	ldi	r24, 0x9A	; 154
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	LCD_enuSetCursor(ROW2, COL1);
     206:	61 e0       	ldi	r22, 0x01	; 1
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("3-Back");
     20e:	82 ea       	ldi	r24, 0xA2	; 162
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	
	while(local_bool_reading){
     216:	29 c0       	rjmp	.+82     	; 0x26a <enuHomePortalMaster+0x98>
		
		KEYPAD_enuRead(&local_u8_value);
		if(local_u8_value != KEYPAD_NOT_PRESSED){
			if((local_u8_value == '1') || (local_u8_value == '2') || (local_u8_value == '3')){
     218:	9f ec       	ldi	r25, 0xCF	; 207
     21a:	98 0f       	add	r25, r24
     21c:	93 30       	cpi	r25, 0x03	; 3
     21e:	28 f5       	brcc	.+74     	; 0x26a <enuHomePortalMaster+0x98>
				switch(copy_u8_portal){
     220:	12 30       	cpi	r17, 0x02	; 2
     222:	91 f0       	breq	.+36     	; 0x248 <enuHomePortalMaster+0x76>
     224:	13 30       	cpi	r17, 0x03	; 3
     226:	c9 f0       	breq	.+50     	; 0x25a <enuHomePortalMaster+0x88>
     228:	11 30       	cpi	r17, 0x01	; 1
     22a:	f9 f4       	brne	.+62     	; 0x26a <enuHomePortalMaster+0x98>
					case 1:
						//Door
						if(local_u8_value == '1'){
     22c:	81 33       	cpi	r24, 0x31	; 49
     22e:	29 f4       	brne	.+10     	; 0x23a <enuHomePortalMaster+0x68>
							enuServoSystem(1, 90);
     230:	6a e5       	ldi	r22, 0x5A	; 90
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	0e 94 8e 00 	call	0x11c	; 0x11c <enuServoSystem>
     238:	18 c0       	rjmp	.+48     	; 0x26a <enuHomePortalMaster+0x98>
							/*enuServoSystem(1, 180);
							Timer0_enuPolling_SetTimer(800);
							enuServoSystem(1, 90);*/
						}else if(local_u8_value == '2'){
     23a:	82 33       	cpi	r24, 0x32	; 50
     23c:	b1 f0       	breq	.+44     	; 0x26a <enuHomePortalMaster+0x98>
							/*enuServoSystem(1, 0);
							Timer0_enuPolling_SetTimer(800);
							enuServoSystem(1, 90);*/
						}else if(local_u8_value == '3'){
     23e:	83 33       	cpi	r24, 0x33	; 51
     240:	a1 f4       	brne	.+40     	; 0x26a <enuHomePortalMaster+0x98>
							copy_pvid_functionPtr();
     242:	f7 01       	movw	r30, r14
     244:	09 95       	icall
     246:	11 c0       	rjmp	.+34     	; 0x26a <enuHomePortalMaster+0x98>
						}
					break;
					
					case 2:
						//Gate
						if(local_u8_value == '1'){
     248:	81 33       	cpi	r24, 0x31	; 49
     24a:	79 f0       	breq	.+30     	; 0x26a <enuHomePortalMaster+0x98>
							/*enuServoSystem(2, 180);
							Timer0_enuPolling_SetTimer(2000);
							enuServoSystem(2, 90);*/
						}else if(local_u8_value == '2'){
     24c:	82 33       	cpi	r24, 0x32	; 50
     24e:	69 f0       	breq	.+26     	; 0x26a <enuHomePortalMaster+0x98>
							/*enuServoSystem(2, 0);
							Timer0_enuPolling_SetTimer(2000);
							enuServoSystem(2, 90);*/
						}else if(local_u8_value == '3'){
     250:	83 33       	cpi	r24, 0x33	; 51
     252:	59 f4       	brne	.+22     	; 0x26a <enuHomePortalMaster+0x98>
							copy_pvid_functionPtr();
     254:	f7 01       	movw	r30, r14
     256:	09 95       	icall
     258:	08 c0       	rjmp	.+16     	; 0x26a <enuHomePortalMaster+0x98>
						}
					break;
					
					case 3:
						//Window
						if(local_u8_value == '1'){
     25a:	81 33       	cpi	r24, 0x31	; 49
     25c:	31 f0       	breq	.+12     	; 0x26a <enuHomePortalMaster+0x98>
							//enuServoSystem(3, 180);
						}else if(local_u8_value == '2'){
     25e:	82 33       	cpi	r24, 0x32	; 50
     260:	21 f0       	breq	.+8      	; 0x26a <enuHomePortalMaster+0x98>
							//enuServoSystem(3, 90);
						}else if(local_u8_value == '3'){
     262:	83 33       	cpi	r24, 0x33	; 51
     264:	11 f4       	brne	.+4      	; 0x26a <enuHomePortalMaster+0x98>
							copy_pvid_functionPtr();
     266:	f7 01       	movw	r30, r14
     268:	09 95       	icall
	LCD_enuSendString("3-Back");
	
	
	while(local_bool_reading){
		
		KEYPAD_enuRead(&local_u8_value);
     26a:	ce 01       	movw	r24, r28
     26c:	01 96       	adiw	r24, 0x01	; 1
     26e:	0e 94 3b 04 	call	0x876	; 0x876 <KEYPAD_enuRead>
		if(local_u8_value != KEYPAD_NOT_PRESSED){
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	8f 3f       	cpi	r24, 0xFF	; 255
     276:	81 f6       	brne	.-96     	; 0x218 <enuHomePortalMaster+0x46>
     278:	f8 cf       	rjmp	.-16     	; 0x26a <enuHomePortalMaster+0x98>

0000027a <enuHomeLoginScreen>:
		}
	}
	return ES_OK;
}

ES enuHomeLoginScreen(boolean *copy_bool_pass_state){
     27a:	af 92       	push	r10
     27c:	bf 92       	push	r11
     27e:	cf 92       	push	r12
     280:	ef 92       	push	r14
     282:	0f 93       	push	r16
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
     28e:	61 97       	sbiw	r28, 0x11	; 17
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	f8 94       	cli
     294:	de bf       	out	0x3e, r29	; 62
     296:	0f be       	out	0x3f, r0	; 63
     298:	cd bf       	out	0x3d, r28	; 61
     29a:	5c 01       	movw	r10, r24
	u8 local_u8_value;
	u8 local_u8_counter = 0;
	boolean local_bool_reading = True;
	boolean local_bool_checked = True;
	
	char local_char_password[] = HOME_SYSTEM_PASS;
     29c:	88 e0       	ldi	r24, 0x08	; 8
     29e:	eb e6       	ldi	r30, 0x6B	; 107
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	de 01       	movw	r26, r28
     2a4:	1a 96       	adiw	r26, 0x0a	; 10
     2a6:	01 90       	ld	r0, Z+
     2a8:	0d 92       	st	X+, r0
     2aa:	8a 95       	dec	r24
     2ac:	e1 f7       	brne	.-8      	; 0x2a6 <enuHomeLoginScreen+0x2c>
	u8 local_u8_password_size = (sizeof(local_char_password) / sizeof(local_char_password[0]));
	char local_char_inputPass[local_u8_password_size];
	
	LCD_enuSendCommand(LCD_CLEAR_DISPLAY);				//Clear the display
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_enuSendCommand>
	LCD_enuSendCommand(LCD_CURSOR_OFF);					//Remove the cursor
     2b4:	8c e0       	ldi	r24, 0x0C	; 12
     2b6:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_enuSendCommand>
		
	LCD_enuSetCursor(ROW2, COL16);
     2ba:	60 e1       	ldi	r22, 0x10	; 16
     2bc:	82 e0       	ldi	r24, 0x02	; 2
     2be:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuDisplayIntNumbers(Home_u8_Wrong_Pass_Counter);
     2c2:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <__data_end>
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 a9 07 	call	0xf52	; 0xf52 <LCD_enuDisplayIntNumbers>

	LCD_enuSetCursor(ROW1, COL1);
     2d0:	61 e0       	ldi	r22, 0x01	; 1
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("Enter Password");
     2d8:	89 ea       	ldi	r24, 0xA9	; 169
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>

	LCD_enuSetCursor(ROW2, COL1);
     2e0:	61 e0       	ldi	r22, 0x01	; 1
     2e2:	82 e0       	ldi	r24, 0x02	; 2
     2e4:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
ES enuHomeLoginScreen(boolean *copy_bool_pass_state){
	
	u8 local_u8_value;
	u8 local_u8_counter = 0;
	boolean local_bool_reading = True;
	boolean local_bool_checked = True;
     2e8:	ee 24       	eor	r14, r14
     2ea:	e3 94       	inc	r14

ES enuHomeLoginScreen(boolean *copy_bool_pass_state){
	
	u8 local_u8_value;
	u8 local_u8_counter = 0;
	boolean local_bool_reading = True;
     2ec:	01 e0       	ldi	r16, 0x01	; 1
}

ES enuHomeLoginScreen(boolean *copy_bool_pass_state){
	
	u8 local_u8_value;
	u8 local_u8_counter = 0;
     2ee:	10 e0       	ldi	r17, 0x00	; 0

	LCD_enuSetCursor(ROW1, COL1);
	LCD_enuSendString("Enter Password");

	LCD_enuSetCursor(ROW2, COL1);
	while(local_bool_reading){
     2f0:	52 c0       	rjmp	.+164    	; 0x396 <enuHomeLoginScreen+0x11c>
			
		KEYPAD_enuRead(&local_u8_value);
     2f2:	ce 01       	movw	r24, r28
     2f4:	09 96       	adiw	r24, 0x09	; 9
     2f6:	0e 94 3b 04 	call	0x876	; 0x876 <KEYPAD_enuRead>
		if(local_u8_value != KEYPAD_NOT_PRESSED){
     2fa:	89 85       	ldd	r24, Y+9	; 0x09
     2fc:	8f 3f       	cpi	r24, 0xFF	; 255
     2fe:	09 f4       	brne	.+2      	; 0x302 <enuHomeLoginScreen+0x88>
     300:	4a c0       	rjmp	.+148    	; 0x396 <enuHomeLoginScreen+0x11c>
			if(local_u8_counter < local_u8_password_size && (local_u8_value != 'A') && (local_u8_value != 'D')){
     302:	18 30       	cpi	r17, 0x08	; 8
     304:	80 f4       	brcc	.+32     	; 0x326 <enuHomeLoginScreen+0xac>
     306:	81 34       	cpi	r24, 0x41	; 65
     308:	71 f0       	breq	.+28     	; 0x326 <enuHomeLoginScreen+0xac>
     30a:	84 34       	cpi	r24, 0x44	; 68
     30c:	61 f0       	breq	.+24     	; 0x326 <enuHomeLoginScreen+0xac>
				local_char_inputPass[local_u8_counter] = local_u8_value;
     30e:	e1 e0       	ldi	r30, 0x01	; 1
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	ec 0f       	add	r30, r28
     314:	fd 1f       	adc	r31, r29
     316:	e1 0f       	add	r30, r17
     318:	f1 1d       	adc	r31, r1
     31a:	80 83       	st	Z, r24
				LCD_enuSendData('*');
     31c:	8a e2       	ldi	r24, 0x2A	; 42
     31e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_enuSendData>
				local_u8_counter++;
     322:	1f 5f       	subi	r17, 0xFF	; 255
     324:	38 c0       	rjmp	.+112    	; 0x396 <enuHomeLoginScreen+0x11c>
			}else if(local_u8_value == 'D'){
     326:	84 34       	cpi	r24, 0x44	; 68
     328:	91 f4       	brne	.+36     	; 0x34e <enuHomeLoginScreen+0xd4>
				if(local_u8_counter != 0){
     32a:	11 23       	and	r17, r17
     32c:	a1 f1       	breq	.+104    	; 0x396 <enuHomeLoginScreen+0x11c>
					//Delete One Character
					LCD_enuSetCursor(ROW2, (COL1 + local_u8_counter)-1);
     32e:	61 2f       	mov	r22, r17
     330:	82 e0       	ldi	r24, 0x02	; 2
     332:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
					LCD_enuSendData(' ');
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_enuSendData>
					local_u8_counter--;
     33c:	cc 24       	eor	r12, r12
     33e:	ca 94       	dec	r12
     340:	c1 0e       	add	r12, r17
					LCD_enuSetCursor(ROW2, (COL1 + local_u8_counter));
     342:	61 2f       	mov	r22, r17
     344:	82 e0       	ldi	r24, 0x02	; 2
     346:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
			}else if(local_u8_value == 'D'){
				if(local_u8_counter != 0){
					//Delete One Character
					LCD_enuSetCursor(ROW2, (COL1 + local_u8_counter)-1);
					LCD_enuSendData(' ');
					local_u8_counter--;
     34a:	1c 2d       	mov	r17, r12
     34c:	24 c0       	rjmp	.+72     	; 0x396 <enuHomeLoginScreen+0x11c>
					LCD_enuSetCursor(ROW2, (COL1 + local_u8_counter));
				}
			}else if(local_u8_value == 'A'){
     34e:	81 34       	cpi	r24, 0x41	; 65
     350:	11 f5       	brne	.+68     	; 0x396 <enuHomeLoginScreen+0x11c>
     352:	1b c0       	rjmp	.+54     	; 0x38a <enuHomeLoginScreen+0x110>
				//Check password
				for(u8 i = 0; i < local_u8_password_size; i++){
					if(local_char_inputPass[i] != local_char_password[i]){
     354:	82 2f       	mov	r24, r18
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	e1 e0       	ldi	r30, 0x01	; 1
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	ec 0f       	add	r30, r28
     35e:	fd 1f       	adc	r31, r29
     360:	e8 0f       	add	r30, r24
     362:	f9 1f       	adc	r31, r25
     364:	30 81       	ld	r19, Z
     366:	ea e0       	ldi	r30, 0x0A	; 10
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	ec 0f       	add	r30, r28
     36c:	fd 1f       	adc	r31, r29
     36e:	e8 0f       	add	r30, r24
     370:	f9 1f       	adc	r31, r25
     372:	80 81       	ld	r24, Z
     374:	38 17       	cp	r19, r24
     376:	39 f0       	breq	.+14     	; 0x386 <enuHomeLoginScreen+0x10c>
						Home_u8_Wrong_Pass_Counter++;
     378:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
     37c:	8f 5f       	subi	r24, 0xFF	; 255
     37e:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
						local_bool_checked = False;
     382:	e1 2c       	mov	r14, r1
						break;
     384:	05 c0       	rjmp	.+10     	; 0x390 <enuHomeLoginScreen+0x116>
					local_u8_counter--;
					LCD_enuSetCursor(ROW2, (COL1 + local_u8_counter));
				}
			}else if(local_u8_value == 'A'){
				//Check password
				for(u8 i = 0; i < local_u8_password_size; i++){
     386:	2f 5f       	subi	r18, 0xFF	; 255
     388:	01 c0       	rjmp	.+2      	; 0x38c <enuHomeLoginScreen+0x112>
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	28 30       	cpi	r18, 0x08	; 8
     38e:	10 f3       	brcs	.-60     	; 0x354 <enuHomeLoginScreen+0xda>
						local_bool_checked = False;
						break;
					}
				}
				local_bool_reading = False;
				*copy_bool_pass_state = local_bool_checked;
     390:	f5 01       	movw	r30, r10
     392:	e0 82       	st	Z, r14
						Home_u8_Wrong_Pass_Counter++;
						local_bool_checked = False;
						break;
					}
				}
				local_bool_reading = False;
     394:	00 e0       	ldi	r16, 0x00	; 0

	LCD_enuSetCursor(ROW1, COL1);
	LCD_enuSendString("Enter Password");

	LCD_enuSetCursor(ROW2, COL1);
	while(local_bool_reading){
     396:	01 11       	cpse	r16, r1
     398:	ac cf       	rjmp	.-168    	; 0x2f2 <enuHomeLoginScreen+0x78>
				*copy_bool_pass_state = local_bool_checked;
			}
		}
	}
	return ES_OK;
}
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	61 96       	adiw	r28, 0x11	; 17
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	de bf       	out	0x3e, r29	; 62
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	cd bf       	out	0x3d, r28	; 61
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	ef 90       	pop	r14
     3b2:	cf 90       	pop	r12
     3b4:	bf 90       	pop	r11
     3b6:	af 90       	pop	r10
     3b8:	08 95       	ret

000003ba <enuHomeThiefScreen>:

ES enuHomeThiefScreen(){
	
	LCD_enuSendCommand(LCD_CLEAR_DISPLAY);
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_enuSendCommand>
	LCD_enuDisplaySpecialPattern(Home_au8_thief, 0, 5, ROW1, COL10, LCD_ARABIC);
     3c0:	68 94       	set
     3c2:	ee 24       	eor	r14, r14
     3c4:	e2 f8       	bld	r14, 2
     3c6:	0a e0       	ldi	r16, 0x0A	; 10
     3c8:	21 e0       	ldi	r18, 0x01	; 1
     3ca:	45 e0       	ldi	r20, 0x05	; 5
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	88 e3       	ldi	r24, 0x38	; 56
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 49 07 	call	0xe92	; 0xe92 <LCD_enuDisplaySpecialPattern>
	
	while(1){
		LCD_enuSendCommand(LCD_ENGLISH);
     3d6:	86 e0       	ldi	r24, 0x06	; 6
     3d8:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_enuSendCommand>
		LCD_enuSetCursor(ROW2, COL5);
     3dc:	65 e0       	ldi	r22, 0x05	; 5
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
		for(u8 i = 0; i < 8; i++){
     3e4:	c0 e0       	ldi	r28, 0x00	; 0
     3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <enuHomeThiefScreen+0x36>
			LCD_enuSendData('|');
     3e8:	8c e7       	ldi	r24, 0x7C	; 124
     3ea:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_enuSendData>
	LCD_enuDisplaySpecialPattern(Home_au8_thief, 0, 5, ROW1, COL10, LCD_ARABIC);
	
	while(1){
		LCD_enuSendCommand(LCD_ENGLISH);
		LCD_enuSetCursor(ROW2, COL5);
		for(u8 i = 0; i < 8; i++){
     3ee:	cf 5f       	subi	r28, 0xFF	; 255
     3f0:	c8 30       	cpi	r28, 0x08	; 8
     3f2:	d0 f3       	brcs	.-12     	; 0x3e8 <enuHomeThiefScreen+0x2e>
			LCD_enuSendData('|');
		}
		DIO_enuSetPinValue(DIO_GROUP_B, DIO_PIN_6, DIO_HIGH);
     3f4:	41 e0       	ldi	r20, 0x01	; 1
     3f6:	66 e0       	ldi	r22, 0x06	; 6
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
		Timer0_enuPolling_SetTimer(300);
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	86 e9       	ldi	r24, 0x96	; 150
     404:	93 e4       	ldi	r25, 0x43	; 67
     406:	0e 94 b1 0a 	call	0x1562	; 0x1562 <Timer0_enuPolling_SetTimer>
		for(u8 i = 0; i < 8; i++){
     40a:	c0 e0       	ldi	r28, 0x00	; 0
     40c:	09 c0       	rjmp	.+18     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			LCD_enuSetCursor(ROW2, COL5+i);
     40e:	65 e0       	ldi	r22, 0x05	; 5
     410:	6c 0f       	add	r22, r28
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
			LCD_enuSendData(LCD_SPACE_CLEAR);
     418:	80 e2       	ldi	r24, 0x20	; 32
     41a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_enuSendData>
		for(u8 i = 0; i < 8; i++){
			LCD_enuSendData('|');
		}
		DIO_enuSetPinValue(DIO_GROUP_B, DIO_PIN_6, DIO_HIGH);
		Timer0_enuPolling_SetTimer(300);
		for(u8 i = 0; i < 8; i++){
     41e:	cf 5f       	subi	r28, 0xFF	; 255
     420:	c8 30       	cpi	r28, 0x08	; 8
     422:	a8 f3       	brcs	.-22     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
			LCD_enuSetCursor(ROW2, COL5+i);
			LCD_enuSendData(LCD_SPACE_CLEAR);
		}
		Timer0_enuPolling_SetTimer(300);
     424:	60 e0       	ldi	r22, 0x00	; 0
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	86 e9       	ldi	r24, 0x96	; 150
     42a:	93 e4       	ldi	r25, 0x43	; 67
     42c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <Timer0_enuPolling_SetTimer>
		DIO_enuSetPinValue(DIO_GROUP_B, DIO_PIN_6, DIO_LOW);
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	66 e0       	ldi	r22, 0x06	; 6
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
	}
     43a:	cd cf       	rjmp	.-102    	; 0x3d6 <enuHomeThiefScreen+0x1c>

0000043c <enuHomeMainScreen>:
	}
	return ES_OK;
}


ES enuHomeMainScreen(){
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	1f 92       	push	r1
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
	
	boolean local_bool_reading = True;
	u8 local_u8_value;

	LCD_enuSendCommand(LCD_CLEAR_DISPLAY);
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_enuSendCommand>
	LCD_enuSetCursor(ROW1, COL1);
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("1-Living Room");
     454:	88 eb       	ldi	r24, 0xB8	; 184
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	LCD_enuSetCursor(ROW2, COL1);
     45c:	61 e0       	ldi	r22, 0x01	; 1
     45e:	82 e0       	ldi	r24, 0x02	; 2
     460:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("2-BedRoom");
     464:	86 ec       	ldi	r24, 0xC6	; 198
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	LCD_enuSetCursor(ROW2, COL11);
     46c:	6b e0       	ldi	r22, 0x0B	; 11
     46e:	82 e0       	ldi	r24, 0x02	; 2
     470:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("3-Next");
     474:	80 ed       	ldi	r24, 0xD0	; 208
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	while(local_bool_reading){
     47c:	0e c0       	rjmp	.+28     	; 0x49a <enuHomeMainScreen+0x5e>
		
		KEYPAD_enuRead(&local_u8_value);
		if(local_u8_value != KEYPAD_NOT_PRESSED){
			if(local_u8_value == '1'){
     47e:	81 33       	cpi	r24, 0x31	; 49
     480:	19 f4       	brne	.+6      	; 0x488 <enuHomeMainScreen+0x4c>
				//Living Room
				enuHomeLivingRoomScreen();
     482:	0e 94 55 02 	call	0x4aa	; 0x4aa <enuHomeLivingRoomScreen>
     486:	09 c0       	rjmp	.+18     	; 0x49a <enuHomeMainScreen+0x5e>
			}else if(local_u8_value == '2'){
     488:	82 33       	cpi	r24, 0x32	; 50
     48a:	19 f4       	brne	.+6      	; 0x492 <enuHomeMainScreen+0x56>
				//BedRoom
				enuHomeBedRoomScreen();
     48c:	0e 94 99 02 	call	0x532	; 0x532 <enuHomeBedRoomScreen>
     490:	04 c0       	rjmp	.+8      	; 0x49a <enuHomeMainScreen+0x5e>
			}else if(local_u8_value == '3'){
     492:	83 33       	cpi	r24, 0x33	; 51
     494:	11 f4       	brne	.+4      	; 0x49a <enuHomeMainScreen+0x5e>
				enuHomeMenuSubScreen();
     496:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <enuHomeMenuSubScreen>
	LCD_enuSetCursor(ROW2, COL11);
	LCD_enuSendString("3-Next");
	
	while(local_bool_reading){
		
		KEYPAD_enuRead(&local_u8_value);
     49a:	ce 01       	movw	r24, r28
     49c:	01 96       	adiw	r24, 0x01	; 1
     49e:	0e 94 3b 04 	call	0x876	; 0x876 <KEYPAD_enuRead>
		if(local_u8_value != KEYPAD_NOT_PRESSED){
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	8f 3f       	cpi	r24, 0xFF	; 255
     4a6:	59 f7       	brne	.-42     	; 0x47e <enuHomeMainScreen+0x42>
     4a8:	f8 cf       	rjmp	.-16     	; 0x49a <enuHomeMainScreen+0x5e>

000004aa <enuHomeLivingRoomScreen>:
// 		}
// 	}
// 	return ES_OK;
// }

ES enuHomeLivingRoomScreen(){
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	1f 92       	push	r1
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
	boolean local_bool_reading = True;
	u8 local_u8_value;
	
	LCD_enuSendCommand(LCD_CLEAR_DISPLAY);
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_enuSendCommand>
	LCD_enuSetCursor(ROW1, COL1);
     4ba:	61 e0       	ldi	r22, 0x01	; 1
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("1-Light");
     4c2:	87 ed       	ldi	r24, 0xD7	; 215
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	LCD_enuSetCursor(ROW1, COL9);
     4ca:	69 e0       	ldi	r22, 0x09	; 9
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("2-Door");
     4d2:	8f ed       	ldi	r24, 0xDF	; 223
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	LCD_enuSetCursor(ROW2, COL1);
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	82 e0       	ldi	r24, 0x02	; 2
     4de:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("3-Other");
     4e2:	86 ee       	ldi	r24, 0xE6	; 230
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	LCD_enuSetCursor(ROW2, COL9);
     4ea:	69 e0       	ldi	r22, 0x09	; 9
     4ec:	82 e0       	ldi	r24, 0x02	; 2
     4ee:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("4-Back");
     4f2:	8e ee       	ldi	r24, 0xEE	; 238
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	while(local_bool_reading){
     4fa:	13 c0       	rjmp	.+38     	; 0x522 <enuHomeLivingRoomScreen+0x78>
		
		KEYPAD_enuRead(&local_u8_value);
		if(local_u8_value != KEYPAD_NOT_PRESSED){
			if(local_u8_value == '1'){
     4fc:	81 33       	cpi	r24, 0x31	; 49
     4fe:	21 f4       	brne	.+8      	; 0x508 <enuHomeLivingRoomScreen+0x5e>
				//Light Condition
				enuLedSystem(LED_0);
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 8a 00 	call	0x114	; 0x114 <enuLedSystem>
     506:	0d c0       	rjmp	.+26     	; 0x522 <enuHomeLivingRoomScreen+0x78>
			}else if(local_u8_value == '2'){
     508:	82 33       	cpi	r24, 0x32	; 50
     50a:	29 f4       	brne	.+10     	; 0x516 <enuHomeLivingRoomScreen+0x6c>
				enuHomePortalMaster(1, &enuHomeLivingRoomScreen);
     50c:	65 e5       	ldi	r22, 0x55	; 85
     50e:	72 e0       	ldi	r23, 0x02	; 2
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <enuHomePortalMaster>
			}else if(local_u8_value == '3'){
     516:	83 33       	cpi	r24, 0x33	; 51
     518:	21 f0       	breq	.+8      	; 0x522 <enuHomeLivingRoomScreen+0x78>
				//Other
			}else if(local_u8_value == '4'){
     51a:	84 33       	cpi	r24, 0x34	; 52
     51c:	11 f4       	brne	.+4      	; 0x522 <enuHomeLivingRoomScreen+0x78>
				enuHomeMainScreen();
     51e:	0e 94 1e 02 	call	0x43c	; 0x43c <enuHomeMainScreen>
	LCD_enuSetCursor(ROW2, COL9);
	LCD_enuSendString("4-Back");
	
	while(local_bool_reading){
		
		KEYPAD_enuRead(&local_u8_value);
     522:	ce 01       	movw	r24, r28
     524:	01 96       	adiw	r24, 0x01	; 1
     526:	0e 94 3b 04 	call	0x876	; 0x876 <KEYPAD_enuRead>
		if(local_u8_value != KEYPAD_NOT_PRESSED){
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	8f 3f       	cpi	r24, 0xFF	; 255
     52e:	31 f7       	brne	.-52     	; 0x4fc <enuHomeLivingRoomScreen+0x52>
     530:	f8 cf       	rjmp	.-16     	; 0x522 <enuHomeLivingRoomScreen+0x78>

00000532 <enuHomeBedRoomScreen>:
		}
	}
	return ES_OK;
}

ES enuHomeBedRoomScreen(){
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	1f 92       	push	r1
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
	boolean local_bool_reading = True;
	u8 local_u8_value;
	
	LCD_enuSendCommand(LCD_CLEAR_DISPLAY);
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_enuSendCommand>
	LCD_enuSetCursor(ROW1, COL1);
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("1-LightA");
     54a:	85 ef       	ldi	r24, 0xF5	; 245
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	LCD_enuSetCursor(ROW2, COL1);
     552:	61 e0       	ldi	r22, 0x01	; 1
     554:	82 e0       	ldi	r24, 0x02	; 2
     556:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("2-LightB");
     55a:	8e ef       	ldi	r24, 0xFE	; 254
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	LCD_enuSetCursor(ROW2, COL11);
     562:	6b e0       	ldi	r22, 0x0B	; 11
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("3-Back");
     56a:	82 ea       	ldi	r24, 0xA2	; 162
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	while(local_bool_reading){
     572:	10 c0       	rjmp	.+32     	; 0x594 <enuHomeBedRoomScreen+0x62>
		
		KEYPAD_enuRead(&local_u8_value);
		if(local_u8_value != KEYPAD_NOT_PRESSED){
			if(local_u8_value == '1'){
     574:	81 33       	cpi	r24, 0x31	; 49
     576:	21 f4       	brne	.+8      	; 0x580 <enuHomeBedRoomScreen+0x4e>
				//Light Condition
				enuLedSystem(LED_1);
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	0e 94 8a 00 	call	0x114	; 0x114 <enuLedSystem>
     57e:	0a c0       	rjmp	.+20     	; 0x594 <enuHomeBedRoomScreen+0x62>
			}else if(local_u8_value == '2'){
     580:	82 33       	cpi	r24, 0x32	; 50
     582:	21 f4       	brne	.+8      	; 0x58c <enuHomeBedRoomScreen+0x5a>
				enuLedSystem(LED_2);
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	0e 94 8a 00 	call	0x114	; 0x114 <enuLedSystem>
     58a:	04 c0       	rjmp	.+8      	; 0x594 <enuHomeBedRoomScreen+0x62>
			}else if(local_u8_value == '3'){
     58c:	83 33       	cpi	r24, 0x33	; 51
     58e:	11 f4       	brne	.+4      	; 0x594 <enuHomeBedRoomScreen+0x62>
				//Back
				enuHomeMainScreen();
     590:	0e 94 1e 02 	call	0x43c	; 0x43c <enuHomeMainScreen>
	LCD_enuSetCursor(ROW2, COL11);
	LCD_enuSendString("3-Back");
	
	while(local_bool_reading){
		
		KEYPAD_enuRead(&local_u8_value);
     594:	ce 01       	movw	r24, r28
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	0e 94 3b 04 	call	0x876	; 0x876 <KEYPAD_enuRead>
		if(local_u8_value != KEYPAD_NOT_PRESSED){
     59c:	89 81       	ldd	r24, Y+1	; 0x01
     59e:	8f 3f       	cpi	r24, 0xFF	; 255
     5a0:	49 f7       	brne	.-46     	; 0x574 <enuHomeBedRoomScreen+0x42>
     5a2:	f8 cf       	rjmp	.-16     	; 0x594 <enuHomeBedRoomScreen+0x62>

000005a4 <enuHomeMenuSubScreen>:
		}
	}
	return ES_OK;
}

ES enuHomeMenuSubScreen(){
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	1f 92       	push	r1
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
	boolean local_bool_reading = True;
	u8 local_u8_value;

	LCD_enuSendCommand(LCD_CLEAR_DISPLAY);
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_enuSendCommand>
	LCD_enuSetCursor(ROW1, COL1);
     5b4:	61 e0       	ldi	r22, 0x01	; 1
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("4-Kitchen");
     5bc:	87 e0       	ldi	r24, 0x07	; 7
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	LCD_enuSetCursor(ROW2, COL1);
     5c4:	61 e0       	ldi	r22, 0x01	; 1
     5c6:	82 e0       	ldi	r24, 0x02	; 2
     5c8:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("5-Garden");
     5cc:	81 e1       	ldi	r24, 0x11	; 17
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	LCD_enuSetCursor(ROW2, COL11);
     5d4:	6b e0       	ldi	r22, 0x0B	; 11
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("6-Back");
     5dc:	8a e1       	ldi	r24, 0x1A	; 26
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	while(local_bool_reading){
     5e4:	0e c0       	rjmp	.+28     	; 0x602 <enuHomeMenuSubScreen+0x5e>
		
		KEYPAD_enuRead(&local_u8_value);
		if(local_u8_value != KEYPAD_NOT_PRESSED){
			if(local_u8_value == '4'){
     5e6:	84 33       	cpi	r24, 0x34	; 52
     5e8:	19 f4       	brne	.+6      	; 0x5f0 <enuHomeMenuSubScreen+0x4c>
				//Kitchen
				enuHomeKitchenScreen();
     5ea:	0e 94 09 03 	call	0x612	; 0x612 <enuHomeKitchenScreen>
     5ee:	09 c0       	rjmp	.+18     	; 0x602 <enuHomeMenuSubScreen+0x5e>
			}else if(local_u8_value == '5'){
     5f0:	85 33       	cpi	r24, 0x35	; 53
     5f2:	19 f4       	brne	.+6      	; 0x5fa <enuHomeMenuSubScreen+0x56>
				//Garden
				enuHomeGateScreen();
     5f4:	0e 94 4d 03 	call	0x69a	; 0x69a <enuHomeGateScreen>
     5f8:	04 c0       	rjmp	.+8      	; 0x602 <enuHomeMenuSubScreen+0x5e>
			}else if(local_u8_value == '6'){
     5fa:	86 33       	cpi	r24, 0x36	; 54
     5fc:	11 f4       	brne	.+4      	; 0x602 <enuHomeMenuSubScreen+0x5e>
				//Back to MainScreen
				enuHomeMainScreen();
     5fe:	0e 94 1e 02 	call	0x43c	; 0x43c <enuHomeMainScreen>
	LCD_enuSetCursor(ROW2, COL11);
	LCD_enuSendString("6-Back");
	
	while(local_bool_reading){
		
		KEYPAD_enuRead(&local_u8_value);
     602:	ce 01       	movw	r24, r28
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	0e 94 3b 04 	call	0x876	; 0x876 <KEYPAD_enuRead>
		if(local_u8_value != KEYPAD_NOT_PRESSED){
     60a:	89 81       	ldd	r24, Y+1	; 0x01
     60c:	8f 3f       	cpi	r24, 0xFF	; 255
     60e:	59 f7       	brne	.-42     	; 0x5e6 <enuHomeMenuSubScreen+0x42>
     610:	f8 cf       	rjmp	.-16     	; 0x602 <enuHomeMenuSubScreen+0x5e>

00000612 <enuHomeKitchenScreen>:
	}
	return ES_OK;
}


ES enuHomeKitchenScreen(){
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	1f 92       	push	r1
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
	boolean local_bool_reading = True;
	u8 local_u8_value;
	
	LCD_enuSendCommand(LCD_CLEAR_DISPLAY);
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_enuSendCommand>
	LCD_enuSetCursor(ROW1, COL1);
     622:	61 e0       	ldi	r22, 0x01	; 1
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("1-Light");
     62a:	87 ed       	ldi	r24, 0xD7	; 215
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	LCD_enuSetCursor(ROW1, COL9);
     632:	69 e0       	ldi	r22, 0x09	; 9
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("2-Window");
     63a:	81 e2       	ldi	r24, 0x21	; 33
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	LCD_enuSetCursor(ROW2, COL1);
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	82 e0       	ldi	r24, 0x02	; 2
     646:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("3-Temp");
     64a:	8a e2       	ldi	r24, 0x2A	; 42
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	LCD_enuSetCursor(ROW2, COL9);
     652:	69 e0       	ldi	r22, 0x09	; 9
     654:	82 e0       	ldi	r24, 0x02	; 2
     656:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("4-Back");
     65a:	8e ee       	ldi	r24, 0xEE	; 238
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	while(local_bool_reading){
     662:	13 c0       	rjmp	.+38     	; 0x68a <enuHomeKitchenScreen+0x78>
		
		KEYPAD_enuRead(&local_u8_value);
		if(local_u8_value != KEYPAD_NOT_PRESSED){
			if(local_u8_value == '1'){
     664:	81 33       	cpi	r24, 0x31	; 49
     666:	21 f4       	brne	.+8      	; 0x670 <enuHomeKitchenScreen+0x5e>
				//Light Condition
				enuLedSystem(LED_3);
     668:	83 e0       	ldi	r24, 0x03	; 3
     66a:	0e 94 8a 00 	call	0x114	; 0x114 <enuLedSystem>
     66e:	0d c0       	rjmp	.+26     	; 0x68a <enuHomeKitchenScreen+0x78>
			}else if(local_u8_value == '2'){
     670:	82 33       	cpi	r24, 0x32	; 50
     672:	29 f4       	brne	.+10     	; 0x67e <enuHomeKitchenScreen+0x6c>
				enuHomePortalMaster(2, &enuHomeKitchenScreen);
     674:	69 e0       	ldi	r22, 0x09	; 9
     676:	73 e0       	ldi	r23, 0x03	; 3
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <enuHomePortalMaster>
			}else if(local_u8_value == '3'){
     67e:	83 33       	cpi	r24, 0x33	; 51
     680:	21 f0       	breq	.+8      	; 0x68a <enuHomeKitchenScreen+0x78>
				//Display Temperature
			}else if(local_u8_value == '4'){
     682:	84 33       	cpi	r24, 0x34	; 52
     684:	11 f4       	brne	.+4      	; 0x68a <enuHomeKitchenScreen+0x78>
				enuHomeMenuSubScreen();
     686:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <enuHomeMenuSubScreen>
	LCD_enuSetCursor(ROW2, COL9);
	LCD_enuSendString("4-Back");
	
	while(local_bool_reading){
		
		KEYPAD_enuRead(&local_u8_value);
     68a:	ce 01       	movw	r24, r28
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	0e 94 3b 04 	call	0x876	; 0x876 <KEYPAD_enuRead>
		if(local_u8_value != KEYPAD_NOT_PRESSED){
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	8f 3f       	cpi	r24, 0xFF	; 255
     696:	31 f7       	brne	.-52     	; 0x664 <enuHomeKitchenScreen+0x52>
     698:	f8 cf       	rjmp	.-16     	; 0x68a <enuHomeKitchenScreen+0x78>

0000069a <enuHomeGateScreen>:
		}
	}
	return ES_OK;
}

ES enuHomeGateScreen(){
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	1f 92       	push	r1
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
	boolean local_bool_reading = True;
	u8 local_u8_value;
	
	LCD_enuSendCommand(LCD_CLEAR_DISPLAY);
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_enuSendCommand>
	LCD_enuSetCursor(ROW1, COL1);
     6aa:	61 e0       	ldi	r22, 0x01	; 1
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("1-Light");
     6b2:	87 ed       	ldi	r24, 0xD7	; 215
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	LCD_enuSetCursor(ROW1, COL9);
     6ba:	69 e0       	ldi	r22, 0x09	; 9
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("2-Gate");
     6c2:	81 e3       	ldi	r24, 0x31	; 49
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	LCD_enuSetCursor(ROW2, COL1);
     6ca:	61 e0       	ldi	r22, 0x01	; 1
     6cc:	82 e0       	ldi	r24, 0x02	; 2
     6ce:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuSetCursor>
	LCD_enuSendString("3-Back");
     6d2:	82 ea       	ldi	r24, 0xA2	; 162
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_enuSendString>
	
	while(local_bool_reading){
     6da:	11 c0       	rjmp	.+34     	; 0x6fe <enuHomeGateScreen+0x64>
		
		KEYPAD_enuRead(&local_u8_value);
		if(local_u8_value != KEYPAD_NOT_PRESSED){
			if(local_u8_value == '1'){
     6dc:	81 33       	cpi	r24, 0x31	; 49
     6de:	21 f4       	brne	.+8      	; 0x6e8 <enuHomeGateScreen+0x4e>
				//Light Condition
				enuLedSystem(LED_4);
     6e0:	84 e0       	ldi	r24, 0x04	; 4
     6e2:	0e 94 8a 00 	call	0x114	; 0x114 <enuLedSystem>
     6e6:	0b c0       	rjmp	.+22     	; 0x6fe <enuHomeGateScreen+0x64>
			}else if(local_u8_value == '2'){
     6e8:	82 33       	cpi	r24, 0x32	; 50
     6ea:	29 f4       	brne	.+10     	; 0x6f6 <enuHomeGateScreen+0x5c>
				enuHomePortalMaster(2, &enuHomeGateScreen);
     6ec:	6d e4       	ldi	r22, 0x4D	; 77
     6ee:	73 e0       	ldi	r23, 0x03	; 3
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <enuHomePortalMaster>
			}else if(local_u8_value == '3'){
     6f6:	83 33       	cpi	r24, 0x33	; 51
     6f8:	11 f4       	brne	.+4      	; 0x6fe <enuHomeGateScreen+0x64>
				enuHomeMenuSubScreen();
     6fa:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <enuHomeMenuSubScreen>
	LCD_enuSetCursor(ROW2, COL1);
	LCD_enuSendString("3-Back");
	
	while(local_bool_reading){
		
		KEYPAD_enuRead(&local_u8_value);
     6fe:	ce 01       	movw	r24, r28
     700:	01 96       	adiw	r24, 0x01	; 1
     702:	0e 94 3b 04 	call	0x876	; 0x876 <KEYPAD_enuRead>
		if(local_u8_value != KEYPAD_NOT_PRESSED){
     706:	89 81       	ldd	r24, Y+1	; 0x01
     708:	8f 3f       	cpi	r24, 0xFF	; 255
     70a:	41 f7       	brne	.-48     	; 0x6dc <enuHomeGateScreen+0x42>
     70c:	f8 cf       	rjmp	.-16     	; 0x6fe <enuHomeGateScreen+0x64>

0000070e <Home_enuStart>:
	}
	return ES_OK;
}


ES Home_enuStart(){
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	1f 92       	push	r1
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
	
	boolean local_bool_system_pass_state;
	
	switch(Home_u8_Screen_Counter){
     718:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <Home_u8_Screen_Counter>
     71c:	81 30       	cpi	r24, 0x01	; 1
     71e:	61 f0       	breq	.+24     	; 0x738 <Home_enuStart+0x2a>
     720:	18 f0       	brcs	.+6      	; 0x728 <Home_enuStart+0x1a>
     722:	82 30       	cpi	r24, 0x02	; 2
     724:	f9 f0       	breq	.+62     	; 0x764 <Home_enuStart+0x56>
     726:	20 c0       	rjmp	.+64     	; 0x768 <Home_enuStart+0x5a>
		
		case 0:
			//Welcome Screen
			enuHomeWelcomeScreen();
     728:	0e 94 ab 00 	call	0x156	; 0x156 <enuHomeWelcomeScreen>
			Home_u8_Screen_Counter++;
     72c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <Home_u8_Screen_Counter>
     730:	8f 5f       	subi	r24, 0xFF	; 255
     732:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <Home_u8_Screen_Counter>
			break;
     736:	18 c0       	rjmp	.+48     	; 0x768 <Home_enuStart+0x5a>
			
		case 1:
			//Login Screen
			enuHomeLoginScreen(&local_bool_system_pass_state);
     738:	ce 01       	movw	r24, r28
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	0e 94 3d 01 	call	0x27a	; 0x27a <enuHomeLoginScreen>
			if(local_bool_system_pass_state == True){
     740:	89 81       	ldd	r24, Y+1	; 0x01
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	31 f4       	brne	.+12     	; 0x752 <Home_enuStart+0x44>
				Home_u8_Screen_Counter++; //enter menu screen
     746:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <Home_u8_Screen_Counter>
     74a:	8f 5f       	subi	r24, 0xFF	; 255
     74c:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <Home_u8_Screen_Counter>
     750:	0b c0       	rjmp	.+22     	; 0x768 <Home_enuStart+0x5a>
			}else{
				if(Home_u8_Wrong_Pass_Counter == 3){
     752:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
     756:	83 30       	cpi	r24, 0x03	; 3
     758:	39 f4       	brne	.+14     	; 0x768 <Home_enuStart+0x5a>
					Home_u8_Screen_Counter = 69;
     75a:	85 e4       	ldi	r24, 0x45	; 69
     75c:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <Home_u8_Screen_Counter>
					enuHomeThiefScreen();
     760:	0e 94 dd 01 	call	0x3ba	; 0x3ba <enuHomeThiefScreen>
			}
			break;
			
		case 2:
			//Menu Screen
			enuHomeMainScreen();
     764:	0e 94 1e 02 	call	0x43c	; 0x43c <enuHomeMainScreen>
		
		break;
			//Menu
	}
	return ES_OK;
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	0f 90       	pop	r0
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <KEYPAD_enuInit>:

//KeyPad Private Libraries
#include "KeyPad_Priv.h"
#include "KeyPad_Config.h"

ES KEYPAD_enuInit(){
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	60 97       	sbiw	r28, 0x10	; 16
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	f8 94       	cli
     780:	de bf       	out	0x3e, r29	; 62
     782:	0f be       	out	0x3f, r0	; 63
     784:	cd bf       	out	0x3d, r28	; 61
	
	#if (KEYPAD_ROW1_GP <= DIO_GROUP_D && KEYPAD_ROW2_GP <= DIO_GROUP_D && KEYPAD_ROW3_GP <= DIO_GROUP_D && KEYPAD_ROW4_GP <= DIO_GROUP_D && KEYPAD_COL1_GP <= DIO_GROUP_D && KEYPAD_COL2_GP <= DIO_GROUP_D && KEYPAD_COL3_GP <= DIO_GROUP_D && KEYPAD_COL4_GP <= DIO_GROUP_D)
		#if (KEYPAD_ROW1_PIN <= DIO_PIN_7 && KEYPAD_ROW2_PIN <= DIO_PIN_7 && KEYPAD_ROW3_PIN <= DIO_PIN_7 && KEYPAD_ROW4_PIN <= DIO_PIN_7 && KEYPAD_COL1_PIN <= DIO_PIN_7 && KEYPAD_COL2_PIN <= DIO_PIN_7 && KEYPAD_COL3_PIN <= DIO_PIN_7 && KEYPAD_COL4_PIN <= DIO_PIN_7)
		
			//Set all columns to output mode (Main Signal)
			local_aenu_errorstate[0] = DIO_enuSetPinMode(KEYPAD_COL1_GP, KEYPAD_COL1_PIN, DIO_OUTPUT);
     786:	41 e0       	ldi	r20, 0x01	; 1
     788:	63 e0       	ldi	r22, 0x03	; 3
     78a:	82 e0       	ldi	r24, 0x02	; 2
     78c:	0e 94 20 08 	call	0x1040	; 0x1040 <DIO_enuSetPinMode>
     790:	89 83       	std	Y+1, r24	; 0x01
			local_aenu_errorstate[1] = DIO_enuSetPinMode(KEYPAD_COL2_GP, KEYPAD_COL2_PIN, DIO_OUTPUT);
     792:	41 e0       	ldi	r20, 0x01	; 1
     794:	64 e0       	ldi	r22, 0x04	; 4
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	0e 94 20 08 	call	0x1040	; 0x1040 <DIO_enuSetPinMode>
     79c:	8a 83       	std	Y+2, r24	; 0x02
			local_aenu_errorstate[2] = DIO_enuSetPinMode(KEYPAD_COL3_GP, KEYPAD_COL3_PIN, DIO_OUTPUT);
     79e:	41 e0       	ldi	r20, 0x01	; 1
     7a0:	65 e0       	ldi	r22, 0x05	; 5
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	0e 94 20 08 	call	0x1040	; 0x1040 <DIO_enuSetPinMode>
     7a8:	8b 83       	std	Y+3, r24	; 0x03
			local_aenu_errorstate[3] = DIO_enuSetPinMode(KEYPAD_COL4_GP, KEYPAD_COL4_PIN, DIO_OUTPUT);
     7aa:	41 e0       	ldi	r20, 0x01	; 1
     7ac:	66 e0       	ldi	r22, 0x06	; 6
     7ae:	82 e0       	ldi	r24, 0x02	; 2
     7b0:	0e 94 20 08 	call	0x1040	; 0x1040 <DIO_enuSetPinMode>
     7b4:	8c 83       	std	Y+4, r24	; 0x04
	
			//Set all rows to input mode so we can check for button signal at a row and a column
			local_aenu_errorstate[4] = DIO_enuSetPinMode(KEYPAD_ROW1_GP, KEYPAD_ROW1_PIN, DIO_INPUT);
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	64 e0       	ldi	r22, 0x04	; 4
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	0e 94 20 08 	call	0x1040	; 0x1040 <DIO_enuSetPinMode>
     7c0:	8d 83       	std	Y+5, r24	; 0x05
			local_aenu_errorstate[5] = DIO_enuSetPinMode(KEYPAD_ROW2_GP, KEYPAD_ROW2_PIN, DIO_INPUT);
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	65 e0       	ldi	r22, 0x05	; 5
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	0e 94 20 08 	call	0x1040	; 0x1040 <DIO_enuSetPinMode>
     7cc:	8e 83       	std	Y+6, r24	; 0x06
			local_aenu_errorstate[6] = DIO_enuSetPinMode(KEYPAD_ROW3_GP, KEYPAD_ROW3_PIN, DIO_INPUT);
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	66 e0       	ldi	r22, 0x06	; 6
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	0e 94 20 08 	call	0x1040	; 0x1040 <DIO_enuSetPinMode>
     7d8:	8f 83       	std	Y+7, r24	; 0x07
			local_aenu_errorstate[7] = DIO_enuSetPinMode(KEYPAD_ROW4_GP, KEYPAD_ROW4_PIN, DIO_INPUT);
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	67 e0       	ldi	r22, 0x07	; 7
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	0e 94 20 08 	call	0x1040	; 0x1040 <DIO_enuSetPinMode>
     7e4:	88 87       	std	Y+8, r24	; 0x08
	
			//At the beginning of the initialization all rows will have Pull Up values so when a signal is applied it changes its row value to 0 so we can know that at this row there is a button pressed
			local_aenu_errorstate[8] = DIO_enuSetPinValue(KEYPAD_ROW1_GP, KEYPAD_ROW1_PIN, DIO_PULL_UP);
     7e6:	41 e0       	ldi	r20, 0x01	; 1
     7e8:	64 e0       	ldi	r22, 0x04	; 4
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     7f0:	89 87       	std	Y+9, r24	; 0x09
			local_aenu_errorstate[9] = DIO_enuSetPinValue(KEYPAD_ROW2_GP, KEYPAD_ROW2_PIN, DIO_PULL_UP);
     7f2:	41 e0       	ldi	r20, 0x01	; 1
     7f4:	65 e0       	ldi	r22, 0x05	; 5
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     7fc:	8a 87       	std	Y+10, r24	; 0x0a
			local_aenu_errorstate[10] = DIO_enuSetPinValue(KEYPAD_ROW3_GP, KEYPAD_ROW3_PIN, DIO_PULL_UP);
     7fe:	41 e0       	ldi	r20, 0x01	; 1
     800:	66 e0       	ldi	r22, 0x06	; 6
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     808:	8b 87       	std	Y+11, r24	; 0x0b
			local_aenu_errorstate[11] = DIO_enuSetPinValue(KEYPAD_ROW4_GP, KEYPAD_ROW4_PIN, DIO_PULL_UP);
     80a:	41 e0       	ldi	r20, 0x01	; 1
     80c:	67 e0       	ldi	r22, 0x07	; 7
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     814:	8c 87       	std	Y+12, r24	; 0x0c
	
			//Also we set all the column values to high signal, so we can loop through each one of them changing the signal to low so if at this column a button is pressed it will operate since there is a signal
			local_aenu_errorstate[12] = DIO_enuSetPinValue(KEYPAD_COL1_GP, KEYPAD_COL1_PIN, DIO_HIGH);
     816:	41 e0       	ldi	r20, 0x01	; 1
     818:	63 e0       	ldi	r22, 0x03	; 3
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     820:	8d 87       	std	Y+13, r24	; 0x0d
			local_aenu_errorstate[13] = DIO_enuSetPinValue(KEYPAD_COL2_GP, KEYPAD_COL2_PIN, DIO_HIGH);
     822:	41 e0       	ldi	r20, 0x01	; 1
     824:	64 e0       	ldi	r22, 0x04	; 4
     826:	82 e0       	ldi	r24, 0x02	; 2
     828:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     82c:	8e 87       	std	Y+14, r24	; 0x0e
			local_aenu_errorstate[14] = DIO_enuSetPinValue(KEYPAD_COL3_GP, KEYPAD_COL3_PIN, DIO_HIGH);
     82e:	41 e0       	ldi	r20, 0x01	; 1
     830:	65 e0       	ldi	r22, 0x05	; 5
     832:	82 e0       	ldi	r24, 0x02	; 2
     834:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     838:	8f 87       	std	Y+15, r24	; 0x0f
			local_aenu_errorstate[15] = DIO_enuSetPinValue(KEYPAD_COL4_GP, KEYPAD_COL4_PIN, DIO_HIGH);
     83a:	41 e0       	ldi	r20, 0x01	; 1
     83c:	66 e0       	ldi	r22, 0x06	; 6
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     844:	88 8b       	std	Y+16, r24	; 0x10
			#endif
	#else
		#error "Wrong Keypad Pin Configuration"
		#endif
		
	for(u8 i = 0; i < 16; i++){
     846:	90 e0       	ldi	r25, 0x00	; 0
#include "KeyPad_Priv.h"
#include "KeyPad_Config.h"

ES KEYPAD_enuInit(){
	
	ES local_enu_errorstate = ES_NOK;	
     848:	81 e0       	ldi	r24, 0x01	; 1
			#endif
	#else
		#error "Wrong Keypad Pin Configuration"
		#endif
		
	for(u8 i = 0; i < 16; i++){
     84a:	0a c0       	rjmp	.+20     	; 0x860 <__stack+0x1>
		local_enu_errorstate = local_aenu_errorstate[i];
     84c:	e1 e0       	ldi	r30, 0x01	; 1
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	ec 0f       	add	r30, r28
     852:	fd 1f       	adc	r31, r29
     854:	e9 0f       	add	r30, r25
     856:	f1 1d       	adc	r31, r1
     858:	80 81       	ld	r24, Z
		if(local_enu_errorstate != ES_OK){
     85a:	81 11       	cpse	r24, r1
     85c:	03 c0       	rjmp	.+6      	; 0x864 <__stack+0x5>
			#endif
	#else
		#error "Wrong Keypad Pin Configuration"
		#endif
		
	for(u8 i = 0; i < 16; i++){
     85e:	9f 5f       	subi	r25, 0xFF	; 255
     860:	90 31       	cpi	r25, 0x10	; 16
     862:	a0 f3       	brcs	.-24     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
			break;
		}
	}
	
	return local_enu_errorstate;
}
     864:	60 96       	adiw	r28, 0x10	; 16
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	cd bf       	out	0x3d, r28	; 61
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <KEYPAD_enuRead>:

ES KEYPAD_enuRead(u8 *copy_u8_value){
     876:	5f 92       	push	r5
     878:	6f 92       	push	r6
     87a:	7f 92       	push	r7
     87c:	8f 92       	push	r8
     87e:	9f 92       	push	r9
     880:	af 92       	push	r10
     882:	bf 92       	push	r11
     884:	cf 92       	push	r12
     886:	df 92       	push	r13
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	cd b7       	in	r28, 0x3d	; 61
     896:	de b7       	in	r29, 0x3e	; 62
     898:	e5 97       	sbiw	r28, 0x35	; 53
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd bf       	out	0x3d, r28	; 61
     8a4:	6c 01       	movw	r12, r24
	
	ES local_enu_errorstate = ES_NOK;
	ES local_aenu_errorstate[4];
	
	*copy_u8_value = KEYPAD_NOT_PRESSED;
     8a6:	8f ef       	ldi	r24, 0xFF	; 255
     8a8:	d6 01       	movw	r26, r12
     8aa:	8c 93       	st	X, r24
	
	u8 local_u8_buttonstate;
	
	boolean local_bool_pressed = False;
	
	u8 local_au8_rows[][4] = KEYPAD_ROWS;            // all keypad rows
     8ac:	40 e1       	ldi	r20, 0x10	; 16
     8ae:	fe 01       	movw	r30, r28
     8b0:	36 96       	adiw	r30, 0x06	; 6
     8b2:	df 01       	movw	r26, r30
     8b4:	84 2f       	mov	r24, r20
     8b6:	1d 92       	st	X+, r1
     8b8:	8a 95       	dec	r24
     8ba:	e9 f7       	brne	.-6      	; 0x8b6 <KEYPAD_enuRead+0x40>
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	9e 83       	std	Y+6, r25	; 0x06
     8c0:	34 e0       	ldi	r19, 0x04	; 4
     8c2:	3f 83       	std	Y+7, r19	; 0x07
     8c4:	9a 87       	std	Y+10, r25	; 0x0a
     8c6:	25 e0       	ldi	r18, 0x05	; 5
     8c8:	2b 87       	std	Y+11, r18	; 0x0b
     8ca:	9e 87       	std	Y+14, r25	; 0x0e
     8cc:	86 e0       	ldi	r24, 0x06	; 6
     8ce:	8f 87       	std	Y+15, r24	; 0x0f
     8d0:	9a 8b       	std	Y+18, r25	; 0x12
     8d2:	97 e0       	ldi	r25, 0x07	; 7
     8d4:	9b 8b       	std	Y+19, r25	; 0x13
	u8 local_au8_cols[][4] = KEYPAD_COLUMNS;         // all keypad cols
     8d6:	70 96       	adiw	r30, 0x10	; 16
     8d8:	df 01       	movw	r26, r30
     8da:	1d 92       	st	X+, r1
     8dc:	4a 95       	dec	r20
     8de:	e9 f7       	brne	.-6      	; 0x8da <KEYPAD_enuRead+0x64>
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	9e 8b       	std	Y+22, r25	; 0x16
     8e4:	43 e0       	ldi	r20, 0x03	; 3
     8e6:	4f 8b       	std	Y+23, r20	; 0x17
     8e8:	9a 8f       	std	Y+26, r25	; 0x1a
     8ea:	3b 8f       	std	Y+27, r19	; 0x1b
     8ec:	9e 8f       	std	Y+30, r25	; 0x1e
     8ee:	2f 8f       	std	Y+31, r18	; 0x1f
     8f0:	9a a3       	std	Y+34, r25	; 0x22
     8f2:	8b a3       	std	Y+35, r24	; 0x23
	u8 local_au8_keypadValues[][4] = KEYPAD_VALUES;  // all keypad values
     8f4:	80 e1       	ldi	r24, 0x10	; 16
     8f6:	e3 e7       	ldi	r30, 0x73	; 115
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	de 01       	movw	r26, r28
     8fc:	96 96       	adiw	r26, 0x26	; 38
     8fe:	01 90       	ld	r0, Z+
     900:	0d 92       	st	X+, r0
     902:	8a 95       	dec	r24
     904:	e1 f7       	brne	.-8      	; 0x8fe <KEYPAD_enuRead+0x88>
	
	if(copy_u8_value == NULL){
     906:	c1 14       	cp	r12, r1
     908:	d1 04       	cpc	r13, r1
     90a:	09 f4       	brne	.+2      	; 0x90e <KEYPAD_enuRead+0x98>
     90c:	78 c0       	rjmp	.+240    	; 0x9fe <KEYPAD_enuRead+0x188>
     90e:	91 2c       	mov	r9, r1
     910:	61 2c       	mov	r6, r1
     912:	6f c0       	rjmp	.+222    	; 0x9f2 <KEYPAD_enuRead+0x17c>
		local_enu_errorstate = ES_NULL_POINTER;
	}else{
		for(u8 i = 0; i < 4; i++){
			// Set each column at a time to low and check for button signal
			local_aenu_errorstate[0] = DIO_enuSetPinValue(local_au8_cols[i][0], local_au8_cols[i][1], DIO_LOW);
     914:	e9 2c       	mov	r14, r9
     916:	f1 2c       	mov	r15, r1
     918:	f7 01       	movw	r30, r14
     91a:	ee 0f       	add	r30, r30
     91c:	ff 1f       	adc	r31, r31
     91e:	ee 0f       	add	r30, r30
     920:	ff 1f       	adc	r31, r31
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	8c 0f       	add	r24, r28
     928:	9d 1f       	adc	r25, r29
     92a:	e8 0f       	add	r30, r24
     92c:	f9 1f       	adc	r31, r25
     92e:	76 88       	ldd	r7, Z+22	; 0x16
     930:	85 88       	ldd	r8, Z+21	; 0x15
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	67 2d       	mov	r22, r7
     936:	88 2d       	mov	r24, r8
     938:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     93c:	89 83       	std	Y+1, r24	; 0x01
			
			for(u8 j = 0; j < 4; j++){
     93e:	b1 2c       	mov	r11, r1
     940:	4b c0       	rjmp	.+150    	; 0x9d8 <KEYPAD_enuRead+0x162>
				//Check every row at this column if its button is pressed
				local_aenu_errorstate[1] = DIO_enuReadBit(local_au8_rows[j][0], local_au8_rows[j][1], &local_u8_buttonstate);
     942:	0b 2d       	mov	r16, r11
     944:	10 e0       	ldi	r17, 0x00	; 0
     946:	f8 01       	movw	r30, r16
     948:	ee 0f       	add	r30, r30
     94a:	ff 1f       	adc	r31, r31
     94c:	ee 0f       	add	r30, r30
     94e:	ff 1f       	adc	r31, r31
     950:	a1 e0       	ldi	r26, 0x01	; 1
     952:	b0 e0       	ldi	r27, 0x00	; 0
     954:	ac 0f       	add	r26, r28
     956:	bd 1f       	adc	r27, r29
     958:	ea 0f       	add	r30, r26
     95a:	fb 1f       	adc	r31, r27
     95c:	a6 80       	ldd	r10, Z+6	; 0x06
     95e:	55 80       	ldd	r5, Z+5	; 0x05
     960:	ae 01       	movw	r20, r28
     962:	4b 5f       	subi	r20, 0xFB	; 251
     964:	5f 4f       	sbci	r21, 0xFF	; 255
     966:	6a 2d       	mov	r22, r10
     968:	85 2d       	mov	r24, r5
     96a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_enuReadBit>
     96e:	8a 83       	std	Y+2, r24	; 0x02
				
				if(local_u8_buttonstate == DIO_LOW){
     970:	8d 81       	ldd	r24, Y+5	; 0x05
     972:	81 11       	cpse	r24, r1
     974:	30 c0       	rjmp	.+96     	; 0x9d6 <KEYPAD_enuRead+0x160>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     976:	ef ed       	ldi	r30, 0xDF	; 223
     978:	fe e2       	ldi	r31, 0x2E	; 46
     97a:	31 97       	sbiw	r30, 0x01	; 1
     97c:	f1 f7       	brne	.-4      	; 0x97a <KEYPAD_enuRead+0x104>
     97e:	00 c0       	rjmp	.+0      	; 0x980 <KEYPAD_enuRead+0x10a>
     980:	00 00       	nop
					_delay_ms(3);  // for bouncing
					local_aenu_errorstate[2] = DIO_enuReadBit(local_au8_rows[j][0], local_au8_rows[j][1], &local_u8_buttonstate);  // get the reading again to confirm
     982:	ae 01       	movw	r20, r28
     984:	4b 5f       	subi	r20, 0xFB	; 251
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	6a 2d       	mov	r22, r10
     98a:	85 2d       	mov	r24, r5
     98c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_enuReadBit>
     990:	8b 83       	std	Y+3, r24	; 0x03
					if(local_u8_buttonstate == DIO_LOW){                            
     992:	8d 81       	ldd	r24, Y+5	; 0x05
     994:	81 11       	cpse	r24, r1
     996:	1f c0       	rjmp	.+62     	; 0x9d6 <KEYPAD_enuRead+0x160>
						*copy_u8_value = local_au8_keypadValues[j][i];             // take action
     998:	00 0f       	add	r16, r16
     99a:	11 1f       	adc	r17, r17
     99c:	00 0f       	add	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	8c 0f       	add	r24, r28
     9a6:	9d 1f       	adc	r25, r29
     9a8:	08 0f       	add	r16, r24
     9aa:	19 1f       	adc	r17, r25
     9ac:	f8 01       	movw	r30, r16
     9ae:	ee 0d       	add	r30, r14
     9b0:	ff 1d       	adc	r31, r15
     9b2:	85 a1       	ldd	r24, Z+37	; 0x25
     9b4:	d6 01       	movw	r26, r12
     9b6:	8c 93       	st	X, r24
						local_bool_pressed = True;
						while(local_u8_buttonstate == DIO_LOW)                     // to hold the state until the next press and prvent hold on a button
     9b8:	08 c0       	rjmp	.+16     	; 0x9ca <KEYPAD_enuRead+0x154>
							local_aenu_errorstate[2] = DIO_enuReadBit(local_au8_rows[j][0], local_au8_rows[j][1], &local_u8_buttonstate);
     9ba:	ae 01       	movw	r20, r28
     9bc:	4b 5f       	subi	r20, 0xFB	; 251
     9be:	5f 4f       	sbci	r21, 0xFF	; 255
     9c0:	6a 2d       	mov	r22, r10
     9c2:	85 2d       	mov	r24, r5
     9c4:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_enuReadBit>
     9c8:	8b 83       	std	Y+3, r24	; 0x03
					_delay_ms(3);  // for bouncing
					local_aenu_errorstate[2] = DIO_enuReadBit(local_au8_rows[j][0], local_au8_rows[j][1], &local_u8_buttonstate);  // get the reading again to confirm
					if(local_u8_buttonstate == DIO_LOW){                            
						*copy_u8_value = local_au8_keypadValues[j][i];             // take action
						local_bool_pressed = True;
						while(local_u8_buttonstate == DIO_LOW)                     // to hold the state until the next press and prvent hold on a button
     9ca:	8d 81       	ldd	r24, Y+5	; 0x05
     9cc:	88 23       	and	r24, r24
     9ce:	a9 f3       	breq	.-22     	; 0x9ba <KEYPAD_enuRead+0x144>
				if(local_u8_buttonstate == DIO_LOW){
					_delay_ms(3);  // for bouncing
					local_aenu_errorstate[2] = DIO_enuReadBit(local_au8_rows[j][0], local_au8_rows[j][1], &local_u8_buttonstate);  // get the reading again to confirm
					if(local_u8_buttonstate == DIO_LOW){                            
						*copy_u8_value = local_au8_keypadValues[j][i];             // take action
						local_bool_pressed = True;
     9d0:	66 24       	eor	r6, r6
     9d2:	63 94       	inc	r6
     9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <KEYPAD_enuRead+0x16a>
	}else{
		for(u8 i = 0; i < 4; i++){
			// Set each column at a time to low and check for button signal
			local_aenu_errorstate[0] = DIO_enuSetPinValue(local_au8_cols[i][0], local_au8_cols[i][1], DIO_LOW);
			
			for(u8 j = 0; j < 4; j++){
     9d6:	b3 94       	inc	r11
     9d8:	b3 e0       	ldi	r27, 0x03	; 3
     9da:	bb 15       	cp	r27, r11
     9dc:	08 f0       	brcs	.+2      	; 0x9e0 <KEYPAD_enuRead+0x16a>
     9de:	b1 cf       	rjmp	.-158    	; 0x942 <KEYPAD_enuRead+0xcc>
						break;                       // breaks from the first loop
					}
				}
			}
			// Return the value of the column to high since there is no signal or after detecting a signal so we can make it to low again and check for buttons state
			local_aenu_errorstate[4] = DIO_enuSetPinValue(local_au8_cols[i][0], local_au8_cols[i][1], DIO_HIGH);
     9e0:	41 e0       	ldi	r20, 0x01	; 1
     9e2:	67 2d       	mov	r22, r7
     9e4:	88 2d       	mov	r24, r8
     9e6:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
			if(local_bool_pressed == True){
     9ea:	e1 e0       	ldi	r30, 0x01	; 1
     9ec:	6e 16       	cp	r6, r30
     9ee:	49 f0       	breq	.+18     	; 0xa02 <KEYPAD_enuRead+0x18c>
	u8 local_au8_keypadValues[][4] = KEYPAD_VALUES;  // all keypad values
	
	if(copy_u8_value == NULL){
		local_enu_errorstate = ES_NULL_POINTER;
	}else{
		for(u8 i = 0; i < 4; i++){
     9f0:	93 94       	inc	r9
     9f2:	f3 e0       	ldi	r31, 0x03	; 3
     9f4:	f9 15       	cp	r31, r9
     9f6:	08 f0       	brcs	.+2      	; 0x9fa <KEYPAD_enuRead+0x184>
     9f8:	8d cf       	rjmp	.-230    	; 0x914 <KEYPAD_enuRead+0x9e>
	return local_enu_errorstate;
}

ES KEYPAD_enuRead(u8 *copy_u8_value){
	
	ES local_enu_errorstate = ES_NOK;
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	03 c0       	rjmp	.+6      	; 0xa04 <KEYPAD_enuRead+0x18e>
	u8 local_au8_rows[][4] = KEYPAD_ROWS;            // all keypad rows
	u8 local_au8_cols[][4] = KEYPAD_COLUMNS;         // all keypad cols
	u8 local_au8_keypadValues[][4] = KEYPAD_VALUES;  // all keypad values
	
	if(copy_u8_value == NULL){
		local_enu_errorstate = ES_NULL_POINTER;
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	01 c0       	rjmp	.+2      	; 0xa04 <KEYPAD_enuRead+0x18e>
	return local_enu_errorstate;
}

ES KEYPAD_enuRead(u8 *copy_u8_value){
	
	ES local_enu_errorstate = ES_NOK;
     a02:	81 e0       	ldi	r24, 0x01	; 1
			if(local_bool_pressed == True){
				break;                             // breaks from the second loop
			}
		}
	}
	for(u8 i = 0; i < 4; i++){
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0a c0       	rjmp	.+20     	; 0xa1c <KEYPAD_enuRead+0x1a6>
		local_enu_errorstate = local_aenu_errorstate[i];
     a08:	e1 e0       	ldi	r30, 0x01	; 1
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	ec 0f       	add	r30, r28
     a0e:	fd 1f       	adc	r31, r29
     a10:	e9 0f       	add	r30, r25
     a12:	f1 1d       	adc	r31, r1
     a14:	80 81       	ld	r24, Z
		if(local_enu_errorstate != ES_OK){
     a16:	81 11       	cpse	r24, r1
     a18:	03 c0       	rjmp	.+6      	; 0xa20 <KEYPAD_enuRead+0x1aa>
			if(local_bool_pressed == True){
				break;                             // breaks from the second loop
			}
		}
	}
	for(u8 i = 0; i < 4; i++){
     a1a:	9f 5f       	subi	r25, 0xFF	; 255
     a1c:	94 30       	cpi	r25, 0x04	; 4
     a1e:	a0 f3       	brcs	.-24     	; 0xa08 <KEYPAD_enuRead+0x192>
			break;
		}
	}
	
	return local_enu_errorstate;
     a20:	e5 96       	adiw	r28, 0x35	; 53
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	f8 94       	cli
     a26:	de bf       	out	0x3e, r29	; 62
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	cd bf       	out	0x3d, r28	; 61
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	ff 90       	pop	r15
     a36:	ef 90       	pop	r14
     a38:	df 90       	pop	r13
     a3a:	cf 90       	pop	r12
     a3c:	bf 90       	pop	r11
     a3e:	af 90       	pop	r10
     a40:	9f 90       	pop	r9
     a42:	8f 90       	pop	r8
     a44:	7f 90       	pop	r7
     a46:	6f 90       	pop	r6
     a48:	5f 90       	pop	r5
     a4a:	08 95       	ret

00000a4c <enuWriteNLacth>:
		}
	}
	return local_enu_error_state;
}

static ES enuWriteNLacth(u8 copy_u8_byte){
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	2c 97       	sbiw	r28, 0x0c	; 12
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	18 2f       	mov	r17, r24
	
	// If mode == 8 bit or 4 bit this pinValues will be common in both of them
	ES local_enu_error_state = ES_NOK;
	ES local_aenu_error_state[12] = {ES_OK};
     a64:	fe 01       	movw	r30, r28
     a66:	31 96       	adiw	r30, 0x01	; 1
     a68:	8c e0       	ldi	r24, 0x0C	; 12
     a6a:	df 01       	movw	r26, r30
     a6c:	1d 92       	st	X+, r1
     a6e:	8a 95       	dec	r24
     a70:	e9 f7       	brne	.-6      	; 0xa6c <enuWriteNLacth+0x20>
	
	local_aenu_error_state[1] = DIO_enuSetPinValue(LCD_RW_GRP, LCD_RW_PIN, DIO_LOW);          // Since we are writing therefore we put zero
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	62 e0       	ldi	r22, 0x02	; 2
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     a7c:	8a 83       	std	Y+2, r24	; 0x02
	local_aenu_error_state[0] = DIO_enuSetPinValue(LCD_EN_GRP, LCD_EN_PIN, DIO_LOW);
     a7e:	40 e0       	ldi	r20, 0x00	; 0
     a80:	63 e0       	ldi	r22, 0x03	; 3
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     a88:	89 83       	std	Y+1, r24	; 0x01
		
	local_aenu_error_state[2] = DIO_enuSetPinValue(LCD_D4_GRP, LCD_D4_PIN, GetBit(copy_u8_byte, 4));
     a8a:	14 fb       	bst	r17, 4
     a8c:	44 27       	eor	r20, r20
     a8e:	40 f9       	bld	r20, 0
     a90:	64 e0       	ldi	r22, 0x04	; 4
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     a98:	8b 83       	std	Y+3, r24	; 0x03
	local_aenu_error_state[3] = DIO_enuSetPinValue(LCD_D5_GRP, LCD_D5_PIN, GetBit(copy_u8_byte, 5));
     a9a:	15 fb       	bst	r17, 5
     a9c:	44 27       	eor	r20, r20
     a9e:	40 f9       	bld	r20, 0
     aa0:	65 e0       	ldi	r22, 0x05	; 5
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     aa8:	8c 83       	std	Y+4, r24	; 0x04
	local_aenu_error_state[4] = DIO_enuSetPinValue(LCD_D6_GRP, LCD_D6_PIN, GetBit(copy_u8_byte, 6));
     aaa:	16 fb       	bst	r17, 6
     aac:	44 27       	eor	r20, r20
     aae:	40 f9       	bld	r20, 0
     ab0:	66 e0       	ldi	r22, 0x06	; 6
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     ab8:	8d 83       	std	Y+5, r24	; 0x05
	local_aenu_error_state[5] = DIO_enuSetPinValue(LCD_D7_GRP, LCD_D7_PIN, GetBit(copy_u8_byte, 7));
     aba:	41 2f       	mov	r20, r17
     abc:	44 1f       	adc	r20, r20
     abe:	44 27       	eor	r20, r20
     ac0:	44 1f       	adc	r20, r20
     ac2:	67 e0       	ldi	r22, 0x07	; 7
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     aca:	8e 83       	std	Y+6, r24	; 0x06
		local_aenu_error_state[9] = DIO_enuSetPinValue(LCD_D3_GRP, LCD_D3_PIN, GetBit(copy_u8_byte, 3));
		
	#elif LCD_MODE == FOUR_BIT
		
		// Latch
		DIO_enuSetPinValue(LCD_EN_GRP, LCD_EN_PIN, DIO_HIGH);
     acc:	41 e0       	ldi	r20, 0x01	; 1
     ace:	63 e0       	ldi	r22, 0x03	; 3
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     ad6:	8f e9       	ldi	r24, 0x9F	; 159
     ad8:	9f e0       	ldi	r25, 0x0F	; 15
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	f1 f7       	brne	.-4      	; 0xada <enuWriteNLacth+0x8e>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <enuWriteNLacth+0x94>
     ae0:	00 00       	nop
		_delay_ms(1);
		DIO_enuSetPinValue(LCD_EN_GRP, LCD_EN_PIN, DIO_LOW);
     ae2:	40 e0       	ldi	r20, 0x00	; 0
     ae4:	63 e0       	ldi	r22, 0x03	; 3
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
		
		local_aenu_error_state[2] = DIO_enuSetPinValue(LCD_D4_GRP, LCD_D4_PIN, GetBit(copy_u8_byte, 0));
     aec:	41 2f       	mov	r20, r17
     aee:	41 70       	andi	r20, 0x01	; 1
     af0:	64 e0       	ldi	r22, 0x04	; 4
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     af8:	8b 83       	std	Y+3, r24	; 0x03
		local_aenu_error_state[3] = DIO_enuSetPinValue(LCD_D5_GRP, LCD_D5_PIN, GetBit(copy_u8_byte, 1));
     afa:	11 fb       	bst	r17, 1
     afc:	44 27       	eor	r20, r20
     afe:	40 f9       	bld	r20, 0
     b00:	65 e0       	ldi	r22, 0x05	; 5
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     b08:	8c 83       	std	Y+4, r24	; 0x04
		local_aenu_error_state[4] = DIO_enuSetPinValue(LCD_D6_GRP, LCD_D6_PIN, GetBit(copy_u8_byte, 2));
     b0a:	12 fb       	bst	r17, 2
     b0c:	44 27       	eor	r20, r20
     b0e:	40 f9       	bld	r20, 0
     b10:	66 e0       	ldi	r22, 0x06	; 6
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     b18:	8d 83       	std	Y+5, r24	; 0x05
		local_aenu_error_state[5] = DIO_enuSetPinValue(LCD_D7_GRP, LCD_D7_PIN, GetBit(copy_u8_byte, 3));
     b1a:	13 fb       	bst	r17, 3
     b1c:	44 27       	eor	r20, r20
     b1e:	40 f9       	bld	r20, 0
     b20:	67 e0       	ldi	r22, 0x07	; 7
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     b28:	8e 83       	std	Y+6, r24	; 0x06
	#else
		#error "LCD Mode Config must be Eight or Four Bit"
	#endif
	
	// Falling Edge
	local_aenu_error_state[10] = DIO_enuSetPinValue(LCD_EN_GRP, LCD_EN_PIN, DIO_HIGH);
     b2a:	41 e0       	ldi	r20, 0x01	; 1
     b2c:	63 e0       	ldi	r22, 0x03	; 3
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     b34:	8b 87       	std	Y+11, r24	; 0x0b
     b36:	af e9       	ldi	r26, 0x9F	; 159
     b38:	bf e0       	ldi	r27, 0x0F	; 15
     b3a:	11 97       	sbiw	r26, 0x01	; 1
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <enuWriteNLacth+0xee>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <enuWriteNLacth+0xf4>
     b40:	00 00       	nop
	_delay_ms(1);
	local_aenu_error_state[11] = DIO_enuSetPinValue(LCD_EN_GRP, LCD_EN_PIN, DIO_LOW);
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	63 e0       	ldi	r22, 0x03	; 3
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     b4c:	8c 87       	std	Y+12, r24	; 0x0c
     b4e:	8f e3       	ldi	r24, 0x3F	; 63
     b50:	9f e1       	ldi	r25, 0x1F	; 31
     b52:	01 97       	sbiw	r24, 0x01	; 1
     b54:	f1 f7       	brne	.-4      	; 0xb52 <enuWriteNLacth+0x106>
     b56:	00 c0       	rjmp	.+0      	; 0xb58 <enuWriteNLacth+0x10c>
     b58:	00 00       	nop
	
	// delay for waiting LCD to finish its processing
	_delay_ms(2);
	
	// Checking for local errors
	for(u8 i = 0; i < 12; i++){
     b5a:	90 e0       	ldi	r25, 0x00	; 0
}

static ES enuWriteNLacth(u8 copy_u8_byte){
	
	// If mode == 8 bit or 4 bit this pinValues will be common in both of them
	ES local_enu_error_state = ES_NOK;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
	
	// delay for waiting LCD to finish its processing
	_delay_ms(2);
	
	// Checking for local errors
	for(u8 i = 0; i < 12; i++){
     b5e:	0a c0       	rjmp	.+20     	; 0xb74 <enuWriteNLacth+0x128>
		if(local_aenu_error_state[i] != ES_OK){
     b60:	e1 e0       	ldi	r30, 0x01	; 1
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	ec 0f       	add	r30, r28
     b66:	fd 1f       	adc	r31, r29
     b68:	e9 0f       	add	r30, r25
     b6a:	f1 1d       	adc	r31, r1
     b6c:	80 81       	ld	r24, Z
     b6e:	81 11       	cpse	r24, r1
     b70:	03 c0       	rjmp	.+6      	; 0xb78 <enuWriteNLacth+0x12c>
	
	// delay for waiting LCD to finish its processing
	_delay_ms(2);
	
	// Checking for local errors
	for(u8 i = 0; i < 12; i++){
     b72:	9f 5f       	subi	r25, 0xFF	; 255
     b74:	9c 30       	cpi	r25, 0x0C	; 12
     b76:	a0 f3       	brcs	.-24     	; 0xb60 <enuWriteNLacth+0x114>
		}else{
			local_enu_error_state = local_aenu_error_state[i];
		}
	}
	return local_enu_error_state;
}
     b78:	2c 96       	adiw	r28, 0x0c	; 12
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	08 95       	ret

00000b8c <enuDisplayNum>:
	}
	
	return local_enu_errorstate;
}

ES enuDisplayNum(u32 copy_u32_num){
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	2c 97       	sbiw	r28, 0x0c	; 12
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
	ES local_enu_errorstate = ES_OK;
	
	u8 digit;         // to access every digit
	char digits[12];  // to store all digits
	u8 i = 0;
	s8 no_of_digits = 0;
     ba4:	10 e0       	ldi	r17, 0x00	; 0
	
	ES local_enu_errorstate = ES_OK;
	
	u8 digit;         // to access every digit
	char digits[12];  // to store all digits
	u8 i = 0;
     ba6:	00 e0       	ldi	r16, 0x00	; 0
	s8 no_of_digits = 0;
	
	while(copy_u32_num > 0){
     ba8:	14 c0       	rjmp	.+40     	; 0xbd2 <enuDisplayNum+0x46>
		digit = copy_u32_num % 10;            // accessing the last digit
     baa:	2a e0       	ldi	r18, 0x0A	; 10
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__udivmodsi4>
		digits[i] = digit + '0';              // changing the digit to char so we can display it
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	ec 0f       	add	r30, r28
     bbc:	fd 1f       	adc	r31, r29
     bbe:	e0 0f       	add	r30, r16
     bc0:	f1 1d       	adc	r31, r1
     bc2:	60 5d       	subi	r22, 0xD0	; 208
     bc4:	60 83       	st	Z, r22
		copy_u32_num /= 10;                   // removing last digit
     bc6:	62 2f       	mov	r22, r18
     bc8:	73 2f       	mov	r23, r19
     bca:	84 2f       	mov	r24, r20
     bcc:	95 2f       	mov	r25, r21
		i++;
     bce:	0f 5f       	subi	r16, 0xFF	; 255
		no_of_digits++;                       // counting digits
     bd0:	1f 5f       	subi	r17, 0xFF	; 255
	u8 digit;         // to access every digit
	char digits[12];  // to store all digits
	u8 i = 0;
	s8 no_of_digits = 0;
	
	while(copy_u32_num > 0){
     bd2:	61 15       	cp	r22, r1
     bd4:	71 05       	cpc	r23, r1
     bd6:	81 05       	cpc	r24, r1
     bd8:	91 05       	cpc	r25, r1
     bda:	39 f7       	brne	.-50     	; 0xbaa <enuDisplayNum+0x1e>
     bdc:	20 c0       	rjmp	.+64     	; 0xc1e <enuDisplayNum+0x92>
		no_of_digits++;                       // counting digits
	}
	
	// Displaying
	for(no_of_digits; no_of_digits > 0; no_of_digits--){
		if(digits[no_of_digits - 1] == '0'){
     bde:	e1 2f       	mov	r30, r17
     be0:	01 2e       	mov	r0, r17
     be2:	00 0c       	add	r0, r0
     be4:	ff 0b       	sbc	r31, r31
     be6:	31 97       	sbiw	r30, 0x01	; 1
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	8c 0f       	add	r24, r28
     bee:	9d 1f       	adc	r25, r29
     bf0:	e8 0f       	add	r30, r24
     bf2:	f9 1f       	adc	r31, r25
     bf4:	00 81       	ld	r16, Z
     bf6:	00 33       	cpi	r16, 0x30	; 48
     bf8:	49 f4       	brne	.+18     	; 0xc0c <enuDisplayNum+0x80>
			DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_HIGH);
     bfa:	41 e0       	ldi	r20, 0x01	; 1
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
			enuWriteNLacth('0');
     c04:	80 e3       	ldi	r24, 0x30	; 48
     c06:	0e 94 26 05 	call	0xa4c	; 0xa4c <enuWriteNLacth>
     c0a:	08 c0       	rjmp	.+16     	; 0xc1c <enuDisplayNum+0x90>
		}else{
			DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_HIGH);
     c0c:	41 e0       	ldi	r20, 0x01	; 1
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
			enuWriteNLacth(digits[no_of_digits-1]);
     c16:	80 2f       	mov	r24, r16
     c18:	0e 94 26 05 	call	0xa4c	; 0xa4c <enuWriteNLacth>
		i++;
		no_of_digits++;                       // counting digits
	}
	
	// Displaying
	for(no_of_digits; no_of_digits > 0; no_of_digits--){
     c1c:	11 50       	subi	r17, 0x01	; 1
     c1e:	11 16       	cp	r1, r17
     c20:	f4 f2       	brlt	.-68     	; 0xbde <enuDisplayNum+0x52>
			DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_HIGH);
			enuWriteNLacth(digits[no_of_digits-1]);
		}
	}
	return local_enu_errorstate;
}
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	2c 96       	adiw	r28, 0x0c	; 12
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	08 95       	ret

00000c3a <LCD_enuInit>:
#include "LCD_Config.h"
#include "LCD_Priv.h"


//This function is to initialize the LCD configurations
ES LCD_enuInit(){
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	2c 97       	sbiw	r28, 0x0c	; 12
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
	
	ES local_enu_error_state = ES_NOK;
	ES local_aenu_error_state[12] = {ES_OK};
     c4e:	fe 01       	movw	r30, r28
     c50:	31 96       	adiw	r30, 0x01	; 1
     c52:	8c e0       	ldi	r24, 0x0C	; 12
     c54:	df 01       	movw	r26, r30
     c56:	1d 92       	st	X+, r1
     c58:	8a 95       	dec	r24
     c5a:	e9 f7       	brne	.-6      	; 0xc56 <LCD_enuInit+0x1c>
     c5c:	bf e7       	ldi	r27, 0x7F	; 127
     c5e:	25 eb       	ldi	r18, 0xB5	; 181
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	b1 50       	subi	r27, 0x01	; 1
     c64:	20 40       	sbci	r18, 0x00	; 0
     c66:	80 40       	sbci	r24, 0x00	; 0
     c68:	e1 f7       	brne	.-8      	; 0xc62 <LCD_enuInit+0x28>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <LCD_enuInit+0x32>
     c6c:	00 00       	nop
		
	_delay_ms(35);
	
	local_aenu_error_state[0] = DIO_enuSetPinMode(LCD_EN_GRP, LCD_EN_PIN, DIO_OUTPUT);
     c6e:	41 e0       	ldi	r20, 0x01	; 1
     c70:	63 e0       	ldi	r22, 0x03	; 3
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	0e 94 20 08 	call	0x1040	; 0x1040 <DIO_enuSetPinMode>
     c78:	89 83       	std	Y+1, r24	; 0x01
	local_aenu_error_state[1] = DIO_enuSetPinMode(LCD_RW_GRP, LCD_RW_PIN, DIO_OUTPUT);          // Since we are writing therefore we put zero
     c7a:	41 e0       	ldi	r20, 0x01	; 1
     c7c:	62 e0       	ldi	r22, 0x02	; 2
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	0e 94 20 08 	call	0x1040	; 0x1040 <DIO_enuSetPinMode>
     c84:	8a 83       	std	Y+2, r24	; 0x02
	local_aenu_error_state[2] = DIO_enuSetPinMode(LCD_RS_GRP, LCD_RS_PIN, DIO_OUTPUT);
     c86:	41 e0       	ldi	r20, 0x01	; 1
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	0e 94 20 08 	call	0x1040	; 0x1040 <DIO_enuSetPinMode>
     c90:	8b 83       	std	Y+3, r24	; 0x03
	
	local_aenu_error_state[3] = DIO_enuSetPinMode(LCD_D4_GRP, LCD_D4_PIN, DIO_OUTPUT);
     c92:	41 e0       	ldi	r20, 0x01	; 1
     c94:	64 e0       	ldi	r22, 0x04	; 4
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	0e 94 20 08 	call	0x1040	; 0x1040 <DIO_enuSetPinMode>
     c9c:	8c 83       	std	Y+4, r24	; 0x04
	local_aenu_error_state[4] = DIO_enuSetPinMode(LCD_D5_GRP, LCD_D5_PIN, DIO_OUTPUT);
     c9e:	41 e0       	ldi	r20, 0x01	; 1
     ca0:	65 e0       	ldi	r22, 0x05	; 5
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	0e 94 20 08 	call	0x1040	; 0x1040 <DIO_enuSetPinMode>
     ca8:	8d 83       	std	Y+5, r24	; 0x05
	local_aenu_error_state[5] = DIO_enuSetPinMode(LCD_D6_GRP, LCD_D6_PIN, DIO_OUTPUT);
     caa:	41 e0       	ldi	r20, 0x01	; 1
     cac:	66 e0       	ldi	r22, 0x06	; 6
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	0e 94 20 08 	call	0x1040	; 0x1040 <DIO_enuSetPinMode>
     cb4:	8e 83       	std	Y+6, r24	; 0x06
	local_aenu_error_state[6] = DIO_enuSetPinMode(LCD_D7_GRP, LCD_D7_PIN, DIO_OUTPUT);
     cb6:	41 e0       	ldi	r20, 0x01	; 1
     cb8:	67 e0       	ldi	r22, 0x07	; 7
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	0e 94 20 08 	call	0x1040	; 0x1040 <DIO_enuSetPinMode>
     cc0:	8f 83       	std	Y+7, r24	; 0x07
		// 0x38 --> For 8 bit mode and with two lines
	
	#elif LCD_MODE == FOUR_BIT
	
		// In the Function Set Command for 4 bit mode we need to send the first command manualy then send it using our funtion
		DIO_enuSetPinValue(LCD_D7_GRP, LCD_D7_PIN, 0);
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	67 e0       	ldi	r22, 0x07	; 7
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_D6_GRP, LCD_D6_PIN, 0);
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	66 e0       	ldi	r22, 0x06	; 6
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_D5_GRP, LCD_D5_PIN, 1);
     cd6:	41 e0       	ldi	r20, 0x01	; 1
     cd8:	65 e0       	ldi	r22, 0x05	; 5
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_D4_GRP, LCD_D4_PIN, 0);
     ce0:	40 e0       	ldi	r20, 0x00	; 0
     ce2:	64 e0       	ldi	r22, 0x04	; 4
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
		
		DIO_enuSetPinValue(LCD_EN_GRP, LCD_EN_PIN, DIO_HIGH);
     cea:	41 e0       	ldi	r20, 0x01	; 1
     cec:	63 e0       	ldi	r22, 0x03	; 3
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     cf4:	af e9       	ldi	r26, 0x9F	; 159
     cf6:	bf e0       	ldi	r27, 0x0F	; 15
     cf8:	11 97       	sbiw	r26, 0x01	; 1
     cfa:	f1 f7       	brne	.-4      	; 0xcf8 <LCD_enuInit+0xbe>
     cfc:	00 c0       	rjmp	.+0      	; 0xcfe <LCD_enuInit+0xc4>
     cfe:	00 00       	nop
		_delay_ms(1);
		DIO_enuSetPinValue(LCD_EN_GRP, LCD_EN_PIN, DIO_LOW);
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	63 e0       	ldi	r22, 0x03	; 3
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
	
		local_aenu_error_state[11] = DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_LOW);
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
		enuWriteNLacth(0x28);
     d14:	88 e2       	ldi	r24, 0x28	; 40
     d16:	0e 94 26 05 	call	0xa4c	; 0xa4c <enuWriteNLacth>
	#else
		#error "LCD Mode Config must be Eight or Four Bit"
	#endif	
	
	// Display ON/OFF Control Command
	local_aenu_error_state[11] = DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_LOW);
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	61 e0       	ldi	r22, 0x01	; 1
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
	enuWriteNLacth(0x0F);
     d24:	8f e0       	ldi	r24, 0x0F	; 15
     d26:	0e 94 26 05 	call	0xa4c	; 0xa4c <enuWriteNLacth>
	
	// Display Clear Command
	local_aenu_error_state[11] = DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_LOW);
     d2a:	40 e0       	ldi	r20, 0x00	; 0
     d2c:	61 e0       	ldi	r22, 0x01	; 1
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
	enuWriteNLacth(0x01);
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	0e 94 26 05 	call	0xa4c	; 0xa4c <enuWriteNLacth>
	
	// Entry Set Mode Command --> Controls writing from left of right
	local_aenu_error_state[11] = DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_LOW);
     d3a:	40 e0       	ldi	r20, 0x00	; 0
     d3c:	61 e0       	ldi	r22, 0x01	; 1
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     d44:	8c 87       	std	Y+12, r24	; 0x0c
	enuWriteNLacth(0x06);
     d46:	86 e0       	ldi	r24, 0x06	; 6
     d48:	0e 94 26 05 	call	0xa4c	; 0xa4c <enuWriteNLacth>
	
	for(u8 i = 0; i < 12; i++){
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0a c0       	rjmp	.+20     	; 0xd64 <LCD_enuInit+0x12a>
		if(local_aenu_error_state[i] != ES_OK){
     d50:	e1 e0       	ldi	r30, 0x01	; 1
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	ec 0f       	add	r30, r28
     d56:	fd 1f       	adc	r31, r29
     d58:	e9 0f       	add	r30, r25
     d5a:	f1 1d       	adc	r31, r1
     d5c:	80 81       	ld	r24, Z
     d5e:	81 11       	cpse	r24, r1
     d60:	04 c0       	rjmp	.+8      	; 0xd6a <LCD_enuInit+0x130>
	
	// Entry Set Mode Command --> Controls writing from left of right
	local_aenu_error_state[11] = DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_LOW);
	enuWriteNLacth(0x06);
	
	for(u8 i = 0; i < 12; i++){
     d62:	9f 5f       	subi	r25, 0xFF	; 255
     d64:	9c 30       	cpi	r25, 0x0C	; 12
     d66:	a0 f3       	brcs	.-24     	; 0xd50 <LCD_enuInit+0x116>


//This function is to initialize the LCD configurations
ES LCD_enuInit(){
	
	ES local_enu_error_state = ES_NOK;
     d68:	81 e0       	ldi	r24, 0x01	; 1
			local_enu_error_state = local_aenu_error_state[i];
			break;
		}
	}
	return local_enu_error_state;
}
     d6a:	2c 96       	adiw	r28, 0x0c	; 12
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	cd bf       	out	0x3d, r28	; 61
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <LCD_enuSendCommand>:
		}
	}
	return local_enu_error_state;
}

ES LCD_enuSendCommand(u8 copy_u8_command){
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	00 d0       	rcall	.+0      	; 0xd84 <LCD_enuSendCommand+0x8>
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	18 2f       	mov	r17, r24
	
	ES local_enu_error_state = ES_NOK;
	ES local_aenu_error_state[2];
	
	local_aenu_error_state[0] = DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_LOW);
     d8a:	40 e0       	ldi	r20, 0x00	; 0
     d8c:	61 e0       	ldi	r22, 0x01	; 1
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     d94:	89 83       	std	Y+1, r24	; 0x01
	local_aenu_error_state[1] = enuWriteNLacth(copy_u8_command);
     d96:	81 2f       	mov	r24, r17
     d98:	0e 94 26 05 	call	0xa4c	; 0xa4c <enuWriteNLacth>
     d9c:	8a 83       	std	Y+2, r24	; 0x02
	
	for(u8 i = 0; i < 2; i++){
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0a c0       	rjmp	.+20     	; 0xdb6 <LCD_enuSendCommand+0x3a>
		if(local_aenu_error_state[i] != ES_OK){
     da2:	e1 e0       	ldi	r30, 0x01	; 1
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	ec 0f       	add	r30, r28
     da8:	fd 1f       	adc	r31, r29
     daa:	e9 0f       	add	r30, r25
     dac:	f1 1d       	adc	r31, r1
     dae:	80 81       	ld	r24, Z
     db0:	81 11       	cpse	r24, r1
     db2:	04 c0       	rjmp	.+8      	; 0xdbc <LCD_enuSendCommand+0x40>
	ES local_aenu_error_state[2];
	
	local_aenu_error_state[0] = DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_LOW);
	local_aenu_error_state[1] = enuWriteNLacth(copy_u8_command);
	
	for(u8 i = 0; i < 2; i++){
     db4:	9f 5f       	subi	r25, 0xFF	; 255
     db6:	92 30       	cpi	r25, 0x02	; 2
     db8:	a0 f3       	brcs	.-24     	; 0xda2 <LCD_enuSendCommand+0x26>
	return local_enu_error_state;
}

ES LCD_enuSendCommand(u8 copy_u8_command){
	
	ES local_enu_error_state = ES_NOK;
     dba:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
	
	return local_enu_error_state;
}
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	08 95       	ret

00000dc8 <LCD_enuSendData>:

ES LCD_enuSendData(u8 copy_u8_data){
     dc8:	1f 93       	push	r17
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <LCD_enuSendData+0x8>
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	18 2f       	mov	r17, r24
	
	ES local_enu_error_state = ES_NOK;
	ES local_aenu_error_state[2];
	
	local_aenu_error_state[0] = DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_HIGH);
     dd6:	41 e0       	ldi	r20, 0x01	; 1
     dd8:	61 e0       	ldi	r22, 0x01	; 1
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
     de0:	89 83       	std	Y+1, r24	; 0x01
	local_aenu_error_state[1] = enuWriteNLacth(copy_u8_data);
     de2:	81 2f       	mov	r24, r17
     de4:	0e 94 26 05 	call	0xa4c	; 0xa4c <enuWriteNLacth>
     de8:	8a 83       	std	Y+2, r24	; 0x02
	
	for(u8 i = 0; i < 2; i++){
     dea:	90 e0       	ldi	r25, 0x00	; 0
	return local_enu_error_state;
}

ES LCD_enuSendData(u8 copy_u8_data){
	
	ES local_enu_error_state = ES_NOK;
     dec:	81 e0       	ldi	r24, 0x01	; 1
	ES local_aenu_error_state[2];
	
	local_aenu_error_state[0] = DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_HIGH);
	local_aenu_error_state[1] = enuWriteNLacth(copy_u8_data);
	
	for(u8 i = 0; i < 2; i++){
     dee:	0a c0       	rjmp	.+20     	; 0xe04 <LCD_enuSendData+0x3c>
		if(local_aenu_error_state[i] != ES_OK){
     df0:	e1 e0       	ldi	r30, 0x01	; 1
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	ec 0f       	add	r30, r28
     df6:	fd 1f       	adc	r31, r29
     df8:	e9 0f       	add	r30, r25
     dfa:	f1 1d       	adc	r31, r1
     dfc:	80 81       	ld	r24, Z
     dfe:	81 11       	cpse	r24, r1
     e00:	03 c0       	rjmp	.+6      	; 0xe08 <LCD_enuSendData+0x40>
	ES local_aenu_error_state[2];
	
	local_aenu_error_state[0] = DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_HIGH);
	local_aenu_error_state[1] = enuWriteNLacth(copy_u8_data);
	
	for(u8 i = 0; i < 2; i++){
     e02:	9f 5f       	subi	r25, 0xFF	; 255
     e04:	92 30       	cpi	r25, 0x02	; 2
     e06:	a0 f3       	brcs	.-24     	; 0xdf0 <LCD_enuSendData+0x28>
			local_enu_error_state = local_aenu_error_state[i];
		}
	}
	
	return local_enu_error_state;
}
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	08 95       	ret

00000e14 <LCD_enuSendString>:

ES LCD_enuSendString(const char *copy_PC_string){
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	ec 01       	movw	r28, r24
	
	ES local_enu_error_state = ES_NOK;
	
	if(copy_PC_string == NULL){
     e1a:	89 2b       	or	r24, r25
     e1c:	89 f0       	breq	.+34     	; 0xe40 <LCD_enuSendString+0x2c>
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	0b c0       	rjmp	.+22     	; 0xe38 <LCD_enuSendString+0x24>
		local_enu_error_state = ES_NULL_POINTER;
	}else{
		
		while(*copy_PC_string != '\0'){
			
			DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_HIGH);
     e22:	41 e0       	ldi	r20, 0x01	; 1
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
			local_enu_error_state = enuWriteNLacth(*copy_PC_string);
     e2c:	88 81       	ld	r24, Y
     e2e:	0e 94 26 05 	call	0xa4c	; 0xa4c <enuWriteNLacth>
			if(local_enu_error_state != ES_OK){
     e32:	81 11       	cpse	r24, r1
     e34:	06 c0       	rjmp	.+12     	; 0xe42 <LCD_enuSendString+0x2e>
				break;
			}
			copy_PC_string++;
     e36:	21 96       	adiw	r28, 0x01	; 1
	
	if(copy_PC_string == NULL){
		local_enu_error_state = ES_NULL_POINTER;
	}else{
		
		while(*copy_PC_string != '\0'){
     e38:	98 81       	ld	r25, Y
     e3a:	91 11       	cpse	r25, r1
     e3c:	f2 cf       	rjmp	.-28     	; 0xe22 <LCD_enuSendString+0xe>
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <LCD_enuSendString+0x2e>
ES LCD_enuSendString(const char *copy_PC_string){
	
	ES local_enu_error_state = ES_NOK;
	
	if(copy_PC_string == NULL){
		local_enu_error_state = ES_NULL_POINTER;
     e40:	83 e0       	ldi	r24, 0x03	; 3
			}
			copy_PC_string++;
		}
	}
	return local_enu_error_state;
}
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	08 95       	ret

00000e48 <LCD_enuSetCursor>:

ES LCD_enuSetCursor(u8 copy_u8_X, u8 copu_u8_Y){
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
	
	ES local_enu_error_state = ES_NOK;
	
	if((copy_u8_X <= ROW2 && copy_u8_X >= ROW1) && (copu_u8_Y <= COL16 && copu_u8_Y >= COL1)){
     e4c:	9f ef       	ldi	r25, 0xFF	; 255
     e4e:	98 0f       	add	r25, r24
     e50:	92 30       	cpi	r25, 0x02	; 2
     e52:	c8 f4       	brcc	.+50     	; 0xe86 <LCD_enuSetCursor+0x3e>
     e54:	9f ef       	ldi	r25, 0xFF	; 255
     e56:	96 0f       	add	r25, r22
     e58:	90 31       	cpi	r25, 0x10	; 16
     e5a:	b8 f4       	brcc	.+46     	; 0xe8a <LCD_enuSetCursor+0x42>
     e5c:	d6 2f       	mov	r29, r22
     e5e:	c8 2f       	mov	r28, r24
		
		// Since our address starts from 0x80
		DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_LOW);
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	61 e0       	ldi	r22, 0x01	; 1
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
		enuWriteNLacth(0x80 + (0x40 * (copy_u8_X - 1)) + (copu_u8_Y - 1));
     e6a:	2c 2f       	mov	r18, r28
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	2f 5f       	subi	r18, 0xFF	; 255
     e70:	3f 4f       	sbci	r19, 0xFF	; 255
     e72:	8d 2f       	mov	r24, r29
     e74:	90 e4       	ldi	r25, 0x40	; 64
     e76:	29 9f       	mul	r18, r25
     e78:	80 0d       	add	r24, r0
     e7a:	11 24       	eor	r1, r1
     e7c:	81 50       	subi	r24, 0x01	; 1
     e7e:	0e 94 26 05 	call	0xa4c	; 0xa4c <enuWriteNLacth>
	return local_enu_error_state;
}

ES LCD_enuSetCursor(u8 copy_u8_X, u8 copu_u8_Y){
	
	ES local_enu_error_state = ES_NOK;
     e82:	81 e0       	ldi	r24, 0x01	; 1
	
	if((copy_u8_X <= ROW2 && copy_u8_X >= ROW1) && (copu_u8_Y <= COL16 && copu_u8_Y >= COL1)){
		
		// Since our address starts from 0x80
		DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_LOW);
		enuWriteNLacth(0x80 + (0x40 * (copy_u8_X - 1)) + (copu_u8_Y - 1));
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <LCD_enuSetCursor+0x44>
		
	}else{
		local_enu_error_state = ES_OUT_OF_RANGE;
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <LCD_enuSetCursor+0x44>
     e8a:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	return local_enu_error_state;
}
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <LCD_enuDisplaySpecialPattern>:

ES LCD_enuDisplaySpecialPattern(u8 copy_u8_special_pattern[], u8 copy_u8_start_pattern, u8 copy_u8_no_of_patterns, u8 copy_u8_X, u8 copy_u8_Y, u8 copy_u8_language){
     e92:	bf 92       	push	r11
     e94:	cf 92       	push	r12
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	6c 01       	movw	r12, r24
     ea6:	c6 2f       	mov	r28, r22
     ea8:	14 2f       	mov	r17, r20
     eaa:	b2 2e       	mov	r11, r18
	
	ES local_enu_errorstate = ES_OK;
	
	u8 local_u8_pattern = LCD_u8_PATTERNS[copy_u8_start_pattern];
     eac:	e6 2f       	mov	r30, r22
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	e0 5a       	subi	r30, 0xA0	; 160
     eb2:	fe 4f       	sbci	r31, 0xFE	; 254
     eb4:	d0 81       	ld	r29, Z
	
	//1-Access the pattern in the CGRAM to store your custom patterns and display it
	DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_LOW);
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
	enuWriteNLacth(local_u8_pattern);       // Access Pattern at CGRAM
     ec0:	8d 2f       	mov	r24, r29
     ec2:	0e 94 26 05 	call	0xa4c	; 0xa4c <enuWriteNLacth>
	
	//2-A single pattern has 8 characters, so we can calculate the number of characters
	u8 local_u8_characters = (copy_u8_no_of_patterns * 8);
     ec6:	f1 2e       	mov	r15, r17
     ec8:	ff 0c       	add	r15, r15
     eca:	ff 0c       	add	r15, r15
     ecc:	ff 0c       	add	r15, r15
	
	//3-Sending each character to be stored in patterns
	for(u8 i = 0; i < local_u8_characters; i++){
     ece:	d0 e0       	ldi	r29, 0x00	; 0
     ed0:	0c c0       	rjmp	.+24     	; 0xeea <LCD_enuDisplaySpecialPattern+0x58>
		DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_HIGH);
     ed2:	41 e0       	ldi	r20, 0x01	; 1
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
		enuWriteNLacth(copy_u8_special_pattern[i]);
     edc:	f6 01       	movw	r30, r12
     ede:	ed 0f       	add	r30, r29
     ee0:	f1 1d       	adc	r31, r1
     ee2:	80 81       	ld	r24, Z
     ee4:	0e 94 26 05 	call	0xa4c	; 0xa4c <enuWriteNLacth>
	
	//2-A single pattern has 8 characters, so we can calculate the number of characters
	u8 local_u8_characters = (copy_u8_no_of_patterns * 8);
	
	//3-Sending each character to be stored in patterns
	for(u8 i = 0; i < local_u8_characters; i++){
     ee8:	df 5f       	subi	r29, 0xFF	; 255
     eea:	df 15       	cp	r29, r15
     eec:	90 f3       	brcs	.-28     	; 0xed2 <LCD_enuDisplaySpecialPattern+0x40>
		DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_HIGH);
		enuWriteNLacth(copy_u8_special_pattern[i]);
	}
	//4-Changing the language whether to write from left or right
	DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_LOW);
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	61 e0       	ldi	r22, 0x01	; 1
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
	enuWriteNLacth(copy_u8_language);      // Language
     ef8:	8e 2d       	mov	r24, r14
     efa:	0e 94 26 05 	call	0xa4c	; 0xa4c <enuWriteNLacth>
	
	//5-SetCursor at which position the pattern will be displayed
	DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_LOW);
     efe:	40 e0       	ldi	r20, 0x00	; 0
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
	enuWriteNLacth(0x80 + (0x40 * (copy_u8_X - 1)) + (copy_u8_Y - 1));
     f08:	2b 2d       	mov	r18, r11
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	2f 5f       	subi	r18, 0xFF	; 255
     f0e:	3f 4f       	sbci	r19, 0xFF	; 255
     f10:	80 2f       	mov	r24, r16
     f12:	90 e4       	ldi	r25, 0x40	; 64
     f14:	29 9f       	mul	r18, r25
     f16:	80 0d       	add	r24, r0
     f18:	11 24       	eor	r1, r1
     f1a:	81 50       	subi	r24, 0x01	; 1
     f1c:	0e 94 26 05 	call	0xa4c	; 0xa4c <enuWriteNLacth>
	
	//6-Access each pattern and display it
	u8 local_u8_patterns_to_display = (copy_u8_no_of_patterns + copy_u8_start_pattern);
     f20:	dc 2f       	mov	r29, r28
     f22:	d1 0f       	add	r29, r17
	for(copy_u8_start_pattern; copy_u8_start_pattern < local_u8_patterns_to_display; copy_u8_start_pattern++){
     f24:	09 c0       	rjmp	.+18     	; 0xf38 <LCD_enuDisplaySpecialPattern+0xa6>
		DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_HIGH);
     f26:	41 e0       	ldi	r20, 0x01	; 1
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
		enuWriteNLacth(copy_u8_start_pattern);
     f30:	8c 2f       	mov	r24, r28
     f32:	0e 94 26 05 	call	0xa4c	; 0xa4c <enuWriteNLacth>
	DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_LOW);
	enuWriteNLacth(0x80 + (0x40 * (copy_u8_X - 1)) + (copy_u8_Y - 1));
	
	//6-Access each pattern and display it
	u8 local_u8_patterns_to_display = (copy_u8_no_of_patterns + copy_u8_start_pattern);
	for(copy_u8_start_pattern; copy_u8_start_pattern < local_u8_patterns_to_display; copy_u8_start_pattern++){
     f36:	cf 5f       	subi	r28, 0xFF	; 255
     f38:	cd 17       	cp	r28, r29
     f3a:	a8 f3       	brcs	.-22     	; 0xf26 <LCD_enuDisplaySpecialPattern+0x94>
		DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_HIGH);
		enuWriteNLacth(copy_u8_start_pattern);
	}
	
	return local_enu_errorstate;
}
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	df 90       	pop	r13
     f4c:	cf 90       	pop	r12
     f4e:	bf 90       	pop	r11
     f50:	08 95       	ret

00000f52 <LCD_enuDisplayIntNumbers>:
		}
	}
	return local_enu_errorstate;
}

ES LCD_enuDisplayIntNumbers(s32 copy_s32_num){
     f52:	cf 92       	push	r12
     f54:	df 92       	push	r13
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
     f5a:	6b 01       	movw	r12, r22
     f5c:	7c 01       	movw	r14, r24
	
	ES local_enu_errorstate = ES_NOK;
	
	if(copy_s32_num < 0){
     f5e:	99 23       	and	r25, r25
     f60:	84 f4       	brge	.+32     	; 0xf82 <LCD_enuDisplayIntNumbers+0x30>
		copy_s32_num *= -1;        // change to positive
     f62:	f0 94       	com	r15
     f64:	e0 94       	com	r14
     f66:	d0 94       	com	r13
     f68:	c0 94       	com	r12
     f6a:	c1 1c       	adc	r12, r1
     f6c:	d1 1c       	adc	r13, r1
     f6e:	e1 1c       	adc	r14, r1
     f70:	f1 1c       	adc	r15, r1
		
		DIO_enuSetPinValue(LCD_RS_GRP, LCD_RS_PIN, DIO_HIGH);
     f72:	41 e0       	ldi	r20, 0x01	; 1
     f74:	61 e0       	ldi	r22, 0x01	; 1
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	0e 94 a6 08 	call	0x114c	; 0x114c <DIO_enuSetPinValue>
		enuWriteNLacth('-');
     f7c:	8d e2       	ldi	r24, 0x2D	; 45
     f7e:	0e 94 26 05 	call	0xa4c	; 0xa4c <enuWriteNLacth>
	}
	
	local_enu_errorstate = enuDisplayNum(copy_s32_num);
     f82:	c7 01       	movw	r24, r14
     f84:	b6 01       	movw	r22, r12
     f86:	0e 94 c6 05 	call	0xb8c	; 0xb8c <enuDisplayNum>
	return local_enu_errorstate;
}
     f8a:	ff 90       	pop	r15
     f8c:	ef 90       	pop	r14
     f8e:	df 90       	pop	r13
     f90:	cf 90       	pop	r12
     f92:	08 95       	ret

00000f94 <LED_enuInit>:
		local_enu_error_state =  DIO_enuSetPinValue(local_astr_led_config[copy_u8_led_id].led_grp, local_astr_led_config[copy_u8_led_id].led_pin, DIO_LOW);
	}else{
		local_enu_error_state = ES_OUT_OF_RANGE;
	}
	return local_enu_error_state;
}
     f94:	cf 93       	push	r28
     f96:	c0 e0       	ldi	r28, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	0e c0       	rjmp	.+28     	; 0xfb8 <LED_enuInit+0x24>
     f9c:	ec 2f       	mov	r30, r28
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	ee 0f       	add	r30, r30
     fa2:	ff 1f       	adc	r31, r31
     fa4:	ef 59       	subi	r30, 0x9F	; 159
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	61 81       	ldd	r22, Z+1	; 0x01
     faa:	41 e0       	ldi	r20, 0x01	; 1
     fac:	80 81       	ld	r24, Z
     fae:	0e 94 20 08 	call	0x1040	; 0x1040 <DIO_enuSetPinMode>
     fb2:	81 11       	cpse	r24, r1
     fb4:	05 c0       	rjmp	.+10     	; 0xfc0 <LED_enuInit+0x2c>
     fb6:	cf 5f       	subi	r28, 0xFF	; 255
     fb8:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
     fbc:	c9 17       	cp	r28, r25
     fbe:	70 f3       	brcs	.-36     	; 0xf9c <LED_enuInit+0x8>
     fc0:	cf 91       	pop	r28
     fc2:	08 95       	ret

00000fc4 <LED_enuToggle>:

ES LED_enuToggle(u8 copy_u8_led_id){
	
	ES local_enu_error_state = ES_NOK;
	if(copy_u8_led_id < local_u8_led_max){
     fc4:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
     fc8:	89 17       	cp	r24, r25
     fca:	58 f4       	brcc	.+22     	; 0xfe2 <LED_enuToggle+0x1e>
		
		local_enu_error_state =  DIO_enuToggleBit(local_astr_led_config[copy_u8_led_id].led_grp, local_astr_led_config[copy_u8_led_id].led_pin);
     fcc:	e8 2f       	mov	r30, r24
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	ee 0f       	add	r30, r30
     fd2:	ff 1f       	adc	r31, r31
     fd4:	ef 59       	subi	r30, 0x9F	; 159
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	61 81       	ldd	r22, Z+1	; 0x01
     fda:	80 81       	ld	r24, Z
     fdc:	0e 94 2c 09 	call	0x1258	; 0x1258 <DIO_enuToggleBit>
     fe0:	08 95       	ret
	}else{
		local_enu_error_state = ES_OUT_OF_RANGE;
     fe2:	82 e0       	ldi	r24, 0x02	; 2
	}
	return local_enu_error_state;
	
     fe4:	08 95       	ret

00000fe6 <__vector_16>:
}

//ADC Interrupt
void __vector_16()__attribute__((signal));

void __vector_16(){
     fe6:	1f 92       	push	r1
     fe8:	0f 92       	push	r0
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	0f 92       	push	r0
     fee:	11 24       	eor	r1, r1
     ff0:	2f 93       	push	r18
     ff2:	3f 93       	push	r19
     ff4:	4f 93       	push	r20
     ff6:	5f 93       	push	r21
     ff8:	6f 93       	push	r22
     ffa:	7f 93       	push	r23
     ffc:	8f 93       	push	r24
     ffe:	9f 93       	push	r25
    1000:	af 93       	push	r26
    1002:	bf 93       	push	r27
    1004:	ef 93       	push	r30
    1006:	ff 93       	push	r31

	if(local_pvid_fun != NULL){
    1008:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <local_pvid_fun>
    100c:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <local_pvid_fun+0x1>
    1010:	30 97       	sbiw	r30, 0x00	; 0
    1012:	29 f0       	breq	.+10     	; 0x101e <__vector_16+0x38>
		local_pvid_fun(local_pvid_parameter);
    1014:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <local_pvid_parameter>
    1018:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <local_pvid_parameter+0x1>
    101c:	09 95       	icall
	}
    101e:	ff 91       	pop	r31
    1020:	ef 91       	pop	r30
    1022:	bf 91       	pop	r27
    1024:	af 91       	pop	r26
    1026:	9f 91       	pop	r25
    1028:	8f 91       	pop	r24
    102a:	7f 91       	pop	r23
    102c:	6f 91       	pop	r22
    102e:	5f 91       	pop	r21
    1030:	4f 91       	pop	r20
    1032:	3f 91       	pop	r19
    1034:	2f 91       	pop	r18
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	0f 90       	pop	r0
    103c:	1f 90       	pop	r1
    103e:	18 95       	reti

00001040 <DIO_enuSetPinMode>:
		local_enu_errorstate = ES_NULL_POINTER;
	}
	
	return local_enu_errorstate;
	
}
    1040:	84 30       	cpi	r24, 0x04	; 4
    1042:	08 f0       	brcs	.+2      	; 0x1046 <DIO_enuSetPinMode+0x6>
    1044:	7b c0       	rjmp	.+246    	; 0x113c <DIO_enuSetPinMode+0xfc>
    1046:	68 30       	cpi	r22, 0x08	; 8
    1048:	08 f0       	brcs	.+2      	; 0x104c <DIO_enuSetPinMode+0xc>
    104a:	7a c0       	rjmp	.+244    	; 0x1140 <DIO_enuSetPinMode+0x100>
    104c:	42 30       	cpi	r20, 0x02	; 2
    104e:	08 f0       	brcs	.+2      	; 0x1052 <DIO_enuSetPinMode+0x12>
    1050:	79 c0       	rjmp	.+242    	; 0x1144 <DIO_enuSetPinMode+0x104>
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	11 f1       	breq	.+68     	; 0x109a <DIO_enuSetPinMode+0x5a>
    1056:	30 f0       	brcs	.+12     	; 0x1064 <DIO_enuSetPinMode+0x24>
    1058:	82 30       	cpi	r24, 0x02	; 2
    105a:	d1 f1       	breq	.+116    	; 0x10d0 <DIO_enuSetPinMode+0x90>
    105c:	83 30       	cpi	r24, 0x03	; 3
    105e:	09 f4       	brne	.+2      	; 0x1062 <DIO_enuSetPinMode+0x22>
    1060:	52 c0       	rjmp	.+164    	; 0x1106 <DIO_enuSetPinMode+0xc6>
    1062:	72 c0       	rjmp	.+228    	; 0x1148 <DIO_enuSetPinMode+0x108>
    1064:	44 23       	and	r20, r20
    1066:	61 f0       	breq	.+24     	; 0x1080 <DIO_enuSetPinMode+0x40>
    1068:	2a b3       	in	r18, 0x1a	; 26
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <DIO_enuSetPinMode+0x34>
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	6a 95       	dec	r22
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <DIO_enuSetPinMode+0x30>
    1078:	82 2b       	or	r24, r18
    107a:	8a bb       	out	0x1a, r24	; 26
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	08 95       	ret
    1080:	2a b3       	in	r18, 0x1a	; 26
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_enuSetPinMode+0x4c>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	6a 95       	dec	r22
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <DIO_enuSetPinMode+0x48>
    1090:	80 95       	com	r24
    1092:	82 23       	and	r24, r18
    1094:	8a bb       	out	0x1a, r24	; 26
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	08 95       	ret
    109a:	44 23       	and	r20, r20
    109c:	61 f0       	breq	.+24     	; 0x10b6 <DIO_enuSetPinMode+0x76>
    109e:	27 b3       	in	r18, 0x17	; 23
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <DIO_enuSetPinMode+0x6a>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	6a 95       	dec	r22
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <DIO_enuSetPinMode+0x66>
    10ae:	82 2b       	or	r24, r18
    10b0:	87 bb       	out	0x17, r24	; 23
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	08 95       	ret
    10b6:	27 b3       	in	r18, 0x17	; 23
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_enuSetPinMode+0x82>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	6a 95       	dec	r22
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_enuSetPinMode+0x7e>
    10c6:	80 95       	com	r24
    10c8:	82 23       	and	r24, r18
    10ca:	87 bb       	out	0x17, r24	; 23
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	08 95       	ret
    10d0:	44 23       	and	r20, r20
    10d2:	61 f0       	breq	.+24     	; 0x10ec <DIO_enuSetPinMode+0xac>
    10d4:	24 b3       	in	r18, 0x14	; 20
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_enuSetPinMode+0xa0>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	6a 95       	dec	r22
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_enuSetPinMode+0x9c>
    10e4:	82 2b       	or	r24, r18
    10e6:	84 bb       	out	0x14, r24	; 20
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	08 95       	ret
    10ec:	24 b3       	in	r18, 0x14	; 20
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DIO_enuSetPinMode+0xb8>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	6a 95       	dec	r22
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <DIO_enuSetPinMode+0xb4>
    10fc:	80 95       	com	r24
    10fe:	82 23       	and	r24, r18
    1100:	84 bb       	out	0x14, r24	; 20
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	08 95       	ret
    1106:	44 23       	and	r20, r20
    1108:	61 f0       	breq	.+24     	; 0x1122 <DIO_enuSetPinMode+0xe2>
    110a:	21 b3       	in	r18, 0x11	; 17
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <DIO_enuSetPinMode+0xd6>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	6a 95       	dec	r22
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <DIO_enuSetPinMode+0xd2>
    111a:	82 2b       	or	r24, r18
    111c:	81 bb       	out	0x11, r24	; 17
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	08 95       	ret
    1122:	21 b3       	in	r18, 0x11	; 17
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_enuSetPinMode+0xee>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	6a 95       	dec	r22
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_enuSetPinMode+0xea>
    1132:	80 95       	com	r24
    1134:	82 23       	and	r24, r18
    1136:	81 bb       	out	0x11, r24	; 17
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	08 95       	ret
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	08 95       	ret
    1140:	82 e0       	ldi	r24, 0x02	; 2
    1142:	08 95       	ret
    1144:	82 e0       	ldi	r24, 0x02	; 2
    1146:	08 95       	ret
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	08 95       	ret

0000114c <DIO_enuSetPinValue>:
    114c:	84 30       	cpi	r24, 0x04	; 4
    114e:	08 f0       	brcs	.+2      	; 0x1152 <DIO_enuSetPinValue+0x6>
    1150:	7b c0       	rjmp	.+246    	; 0x1248 <DIO_enuSetPinValue+0xfc>
    1152:	68 30       	cpi	r22, 0x08	; 8
    1154:	08 f0       	brcs	.+2      	; 0x1158 <DIO_enuSetPinValue+0xc>
    1156:	7a c0       	rjmp	.+244    	; 0x124c <DIO_enuSetPinValue+0x100>
    1158:	42 30       	cpi	r20, 0x02	; 2
    115a:	08 f0       	brcs	.+2      	; 0x115e <DIO_enuSetPinValue+0x12>
    115c:	79 c0       	rjmp	.+242    	; 0x1250 <DIO_enuSetPinValue+0x104>
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	11 f1       	breq	.+68     	; 0x11a6 <DIO_enuSetPinValue+0x5a>
    1162:	30 f0       	brcs	.+12     	; 0x1170 <DIO_enuSetPinValue+0x24>
    1164:	82 30       	cpi	r24, 0x02	; 2
    1166:	d1 f1       	breq	.+116    	; 0x11dc <DIO_enuSetPinValue+0x90>
    1168:	83 30       	cpi	r24, 0x03	; 3
    116a:	09 f4       	brne	.+2      	; 0x116e <DIO_enuSetPinValue+0x22>
    116c:	52 c0       	rjmp	.+164    	; 0x1212 <DIO_enuSetPinValue+0xc6>
    116e:	72 c0       	rjmp	.+228    	; 0x1254 <DIO_enuSetPinValue+0x108>
    1170:	44 23       	and	r20, r20
    1172:	61 f0       	breq	.+24     	; 0x118c <DIO_enuSetPinValue+0x40>
    1174:	2b b3       	in	r18, 0x1b	; 27
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_enuSetPinValue+0x34>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	6a 95       	dec	r22
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_enuSetPinValue+0x30>
    1184:	82 2b       	or	r24, r18
    1186:	8b bb       	out	0x1b, r24	; 27
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	08 95       	ret
    118c:	2b b3       	in	r18, 0x1b	; 27
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <DIO_enuSetPinValue+0x4c>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	6a 95       	dec	r22
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <DIO_enuSetPinValue+0x48>
    119c:	80 95       	com	r24
    119e:	82 23       	and	r24, r18
    11a0:	8b bb       	out	0x1b, r24	; 27
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	08 95       	ret
    11a6:	44 23       	and	r20, r20
    11a8:	61 f0       	breq	.+24     	; 0x11c2 <DIO_enuSetPinValue+0x76>
    11aa:	28 b3       	in	r18, 0x18	; 24
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_enuSetPinValue+0x6a>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	6a 95       	dec	r22
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_enuSetPinValue+0x66>
    11ba:	82 2b       	or	r24, r18
    11bc:	88 bb       	out	0x18, r24	; 24
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	08 95       	ret
    11c2:	28 b3       	in	r18, 0x18	; 24
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_enuSetPinValue+0x82>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	6a 95       	dec	r22
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_enuSetPinValue+0x7e>
    11d2:	80 95       	com	r24
    11d4:	82 23       	and	r24, r18
    11d6:	88 bb       	out	0x18, r24	; 24
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	08 95       	ret
    11dc:	44 23       	and	r20, r20
    11de:	61 f0       	breq	.+24     	; 0x11f8 <DIO_enuSetPinValue+0xac>
    11e0:	25 b3       	in	r18, 0x15	; 21
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <DIO_enuSetPinValue+0xa0>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	6a 95       	dec	r22
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <DIO_enuSetPinValue+0x9c>
    11f0:	82 2b       	or	r24, r18
    11f2:	85 bb       	out	0x15, r24	; 21
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	08 95       	ret
    11f8:	25 b3       	in	r18, 0x15	; 21
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <DIO_enuSetPinValue+0xb8>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	6a 95       	dec	r22
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <DIO_enuSetPinValue+0xb4>
    1208:	80 95       	com	r24
    120a:	82 23       	and	r24, r18
    120c:	85 bb       	out	0x15, r24	; 21
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	08 95       	ret
    1212:	44 23       	and	r20, r20
    1214:	61 f0       	breq	.+24     	; 0x122e <DIO_enuSetPinValue+0xe2>
    1216:	22 b3       	in	r18, 0x12	; 18
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_enuSetPinValue+0xd6>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	6a 95       	dec	r22
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_enuSetPinValue+0xd2>
    1226:	82 2b       	or	r24, r18
    1228:	82 bb       	out	0x12, r24	; 18
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	08 95       	ret
    122e:	22 b3       	in	r18, 0x12	; 18
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 c0       	rjmp	.+4      	; 0x123a <DIO_enuSetPinValue+0xee>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	6a 95       	dec	r22
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <DIO_enuSetPinValue+0xea>
    123e:	80 95       	com	r24
    1240:	82 23       	and	r24, r18
    1242:	82 bb       	out	0x12, r24	; 18
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	08 95       	ret
    1248:	82 e0       	ldi	r24, 0x02	; 2
    124a:	08 95       	ret
    124c:	82 e0       	ldi	r24, 0x02	; 2
    124e:	08 95       	ret
    1250:	82 e0       	ldi	r24, 0x02	; 2
    1252:	08 95       	ret
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	08 95       	ret

00001258 <DIO_enuToggleBit>:
    1258:	84 30       	cpi	r24, 0x04	; 4
    125a:	d0 f5       	brcc	.+116    	; 0x12d0 <DIO_enuToggleBit+0x78>
    125c:	68 30       	cpi	r22, 0x08	; 8
    125e:	d0 f5       	brcc	.+116    	; 0x12d4 <DIO_enuToggleBit+0x7c>
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	91 f0       	breq	.+36     	; 0x1288 <DIO_enuToggleBit+0x30>
    1264:	28 f0       	brcs	.+10     	; 0x1270 <DIO_enuToggleBit+0x18>
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	d9 f0       	breq	.+54     	; 0x12a0 <DIO_enuToggleBit+0x48>
    126a:	83 30       	cpi	r24, 0x03	; 3
    126c:	29 f1       	breq	.+74     	; 0x12b8 <DIO_enuToggleBit+0x60>
    126e:	34 c0       	rjmp	.+104    	; 0x12d8 <DIO_enuToggleBit+0x80>
    1270:	2b b3       	in	r18, 0x1b	; 27
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_enuToggleBit+0x24>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	6a 95       	dec	r22
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_enuToggleBit+0x20>
    1280:	82 27       	eor	r24, r18
    1282:	8b bb       	out	0x1b, r24	; 27
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	08 95       	ret
    1288:	28 b3       	in	r18, 0x18	; 24
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_enuToggleBit+0x3c>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	6a 95       	dec	r22
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_enuToggleBit+0x38>
    1298:	82 27       	eor	r24, r18
    129a:	88 bb       	out	0x18, r24	; 24
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	08 95       	ret
    12a0:	25 b3       	in	r18, 0x15	; 21
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <DIO_enuToggleBit+0x54>
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	6a 95       	dec	r22
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <DIO_enuToggleBit+0x50>
    12b0:	82 27       	eor	r24, r18
    12b2:	85 bb       	out	0x15, r24	; 21
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	08 95       	ret
    12b8:	22 b3       	in	r18, 0x12	; 18
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <DIO_enuToggleBit+0x6c>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	6a 95       	dec	r22
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <DIO_enuToggleBit+0x68>
    12c8:	82 27       	eor	r24, r18
    12ca:	82 bb       	out	0x12, r24	; 18
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	08 95       	ret
    12d0:	82 e0       	ldi	r24, 0x02	; 2
    12d2:	08 95       	ret
    12d4:	82 e0       	ldi	r24, 0x02	; 2
    12d6:	08 95       	ret
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	08 95       	ret

000012dc <DIO_enuReadBit>:

ES DIO_enuReadBit(u8 copy_u8_groupID, u8 copy_u8_bitNo, u8 * copy_pu8_value){
	
	ES local_enu_errorstate = ES_NOK;
	
	if(copy_pu8_value != NULL){
    12dc:	41 15       	cp	r20, r1
    12de:	51 05       	cpc	r21, r1
    12e0:	e1 f1       	breq	.+120    	; 0x135a <DIO_enuReadBit+0x7e>
		
		if(copy_u8_groupID <= DIO_GROUP_D && copy_u8_bitNo <= DIO_PIN_7){
    12e2:	84 30       	cpi	r24, 0x04	; 4
    12e4:	e0 f5       	brcc	.+120    	; 0x135e <DIO_enuReadBit+0x82>
    12e6:	68 30       	cpi	r22, 0x08	; 8
    12e8:	e0 f5       	brcc	.+120    	; 0x1362 <DIO_enuReadBit+0x86>
			
			switch(copy_u8_groupID){
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	91 f0       	breq	.+36     	; 0x1312 <DIO_enuReadBit+0x36>
    12ee:	28 f0       	brcs	.+10     	; 0x12fa <DIO_enuReadBit+0x1e>
    12f0:	82 30       	cpi	r24, 0x02	; 2
    12f2:	d9 f0       	breq	.+54     	; 0x132a <DIO_enuReadBit+0x4e>
    12f4:	83 30       	cpi	r24, 0x03	; 3
    12f6:	29 f1       	breq	.+74     	; 0x1342 <DIO_enuReadBit+0x66>
    12f8:	36 c0       	rjmp	.+108    	; 0x1366 <DIO_enuReadBit+0x8a>
				
				case DIO_GROUP_A:
				*copy_pu8_value = GetBit(PINA_, copy_u8_bitNo);
    12fa:	89 b3       	in	r24, 0x19	; 25
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <DIO_enuReadBit+0x28>
    1300:	95 95       	asr	r25
    1302:	87 95       	ror	r24
    1304:	6a 95       	dec	r22
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <DIO_enuReadBit+0x24>
    1308:	81 70       	andi	r24, 0x01	; 1
    130a:	fa 01       	movw	r30, r20
    130c:	80 83       	st	Z, r24
				case DIO_GROUP_D:
				*copy_pu8_value = GetBit(PIND_, copy_u8_bitNo);
				break;
				
			}
			local_enu_errorstate = ES_OK;
    130e:	80 e0       	ldi	r24, 0x00	; 0
			
			switch(copy_u8_groupID){
				
				case DIO_GROUP_A:
				*copy_pu8_value = GetBit(PINA_, copy_u8_bitNo);
				break;
    1310:	08 95       	ret
				
				case DIO_GROUP_B:
				*copy_pu8_value = GetBit(PINB_, copy_u8_bitNo);
    1312:	86 b3       	in	r24, 0x16	; 22
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_enuReadBit+0x40>
    1318:	95 95       	asr	r25
    131a:	87 95       	ror	r24
    131c:	6a 95       	dec	r22
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_enuReadBit+0x3c>
    1320:	81 70       	andi	r24, 0x01	; 1
    1322:	fa 01       	movw	r30, r20
    1324:	80 83       	st	Z, r24
				case DIO_GROUP_D:
				*copy_pu8_value = GetBit(PIND_, copy_u8_bitNo);
				break;
				
			}
			local_enu_errorstate = ES_OK;
    1326:	80 e0       	ldi	r24, 0x00	; 0
				*copy_pu8_value = GetBit(PINA_, copy_u8_bitNo);
				break;
				
				case DIO_GROUP_B:
				*copy_pu8_value = GetBit(PINB_, copy_u8_bitNo);
				break;
    1328:	08 95       	ret
				
				case DIO_GROUP_C:
				*copy_pu8_value = GetBit(PINC_, copy_u8_bitNo);
    132a:	83 b3       	in	r24, 0x13	; 19
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_enuReadBit+0x58>
    1330:	95 95       	asr	r25
    1332:	87 95       	ror	r24
    1334:	6a 95       	dec	r22
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <DIO_enuReadBit+0x54>
    1338:	81 70       	andi	r24, 0x01	; 1
    133a:	fa 01       	movw	r30, r20
    133c:	80 83       	st	Z, r24
				case DIO_GROUP_D:
				*copy_pu8_value = GetBit(PIND_, copy_u8_bitNo);
				break;
				
			}
			local_enu_errorstate = ES_OK;
    133e:	80 e0       	ldi	r24, 0x00	; 0
				*copy_pu8_value = GetBit(PINB_, copy_u8_bitNo);
				break;
				
				case DIO_GROUP_C:
				*copy_pu8_value = GetBit(PINC_, copy_u8_bitNo);
				break;
    1340:	08 95       	ret
				
				case DIO_GROUP_D:
				*copy_pu8_value = GetBit(PIND_, copy_u8_bitNo);
    1342:	80 b3       	in	r24, 0x10	; 16
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 c0       	rjmp	.+4      	; 0x134c <DIO_enuReadBit+0x70>
    1348:	95 95       	asr	r25
    134a:	87 95       	ror	r24
    134c:	6a 95       	dec	r22
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <DIO_enuReadBit+0x6c>
    1350:	81 70       	andi	r24, 0x01	; 1
    1352:	fa 01       	movw	r30, r20
    1354:	80 83       	st	Z, r24
				break;
				
			}
			local_enu_errorstate = ES_OK;
    1356:	80 e0       	ldi	r24, 0x00	; 0
				*copy_pu8_value = GetBit(PINC_, copy_u8_bitNo);
				break;
				
				case DIO_GROUP_D:
				*copy_pu8_value = GetBit(PIND_, copy_u8_bitNo);
				break;
    1358:	08 95       	ret
			local_enu_errorstate = ES_OK;
			}else{
			local_enu_errorstate = ES_OUT_OF_RANGE;
		}
		}else{
		local_enu_errorstate = ES_NULL_POINTER;
    135a:	83 e0       	ldi	r24, 0x03	; 3
    135c:	08 95       	ret
				break;
				
			}
			local_enu_errorstate = ES_OK;
			}else{
			local_enu_errorstate = ES_OUT_OF_RANGE;
    135e:	82 e0       	ldi	r24, 0x02	; 2
    1360:	08 95       	ret
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	08 95       	ret
				case DIO_GROUP_D:
				*copy_pu8_value = GetBit(PIND_, copy_u8_bitNo);
				break;
				
			}
			local_enu_errorstate = ES_OK;
    1366:	80 e0       	ldi	r24, 0x00	; 0
		local_enu_errorstate = ES_NULL_POINTER;
	}
	
	return local_enu_errorstate;
	
}
    1368:	08 95       	ret

0000136a <__vector_1>:
void __vector_1(void)__attribute__((signal));
void __vector_2(void)__attribute__((signal));
void __vector_3(void)__attribute__((signal));

//Interrupt Function INT0
void __vector_1(void){
    136a:	1f 92       	push	r1
    136c:	0f 92       	push	r0
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	0f 92       	push	r0
    1372:	11 24       	eor	r1, r1
    1374:	2f 93       	push	r18
    1376:	3f 93       	push	r19
    1378:	4f 93       	push	r20
    137a:	5f 93       	push	r21
    137c:	6f 93       	push	r22
    137e:	7f 93       	push	r23
    1380:	8f 93       	push	r24
    1382:	9f 93       	push	r25
    1384:	af 93       	push	r26
    1386:	bf 93       	push	r27
    1388:	ef 93       	push	r30
    138a:	ff 93       	push	r31
	
	// Executes at the moment of interrupt
	if(GLOBAL_FUNCTION_ISR_PTRs[EXTI_INTERRUPT_PIN0] != NULL){
    138c:	e0 91 6e 01 	lds	r30, 0x016E	; 0x80016e <GLOBAL_FUNCTION_ISR_PTRs>
    1390:	f0 91 6f 01 	lds	r31, 0x016F	; 0x80016f <GLOBAL_FUNCTION_ISR_PTRs+0x1>
    1394:	30 97       	sbiw	r30, 0x00	; 0
    1396:	09 f0       	breq	.+2      	; 0x139a <__vector_1+0x30>
		GLOBAL_FUNCTION_ISR_PTRs[EXTI_INTERRUPT_PIN0]();
    1398:	09 95       	icall
	}
}
    139a:	ff 91       	pop	r31
    139c:	ef 91       	pop	r30
    139e:	bf 91       	pop	r27
    13a0:	af 91       	pop	r26
    13a2:	9f 91       	pop	r25
    13a4:	8f 91       	pop	r24
    13a6:	7f 91       	pop	r23
    13a8:	6f 91       	pop	r22
    13aa:	5f 91       	pop	r21
    13ac:	4f 91       	pop	r20
    13ae:	3f 91       	pop	r19
    13b0:	2f 91       	pop	r18
    13b2:	0f 90       	pop	r0
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	0f 90       	pop	r0
    13b8:	1f 90       	pop	r1
    13ba:	18 95       	reti

000013bc <__vector_2>:

//Interrupt Function INT1
void __vector_2(void){
    13bc:	1f 92       	push	r1
    13be:	0f 92       	push	r0
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	0f 92       	push	r0
    13c4:	11 24       	eor	r1, r1
    13c6:	2f 93       	push	r18
    13c8:	3f 93       	push	r19
    13ca:	4f 93       	push	r20
    13cc:	5f 93       	push	r21
    13ce:	6f 93       	push	r22
    13d0:	7f 93       	push	r23
    13d2:	8f 93       	push	r24
    13d4:	9f 93       	push	r25
    13d6:	af 93       	push	r26
    13d8:	bf 93       	push	r27
    13da:	ef 93       	push	r30
    13dc:	ff 93       	push	r31
	if(GLOBAL_FUNCTION_ISR_PTRs[EXTI_INTERRUPT_PIN1] != NULL){
    13de:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <GLOBAL_FUNCTION_ISR_PTRs+0x2>
    13e2:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <GLOBAL_FUNCTION_ISR_PTRs+0x3>
    13e6:	30 97       	sbiw	r30, 0x00	; 0
    13e8:	09 f0       	breq	.+2      	; 0x13ec <__vector_2+0x30>
		GLOBAL_FUNCTION_ISR_PTRs[EXTI_INTERRUPT_PIN1]();
    13ea:	09 95       	icall
	}
}
    13ec:	ff 91       	pop	r31
    13ee:	ef 91       	pop	r30
    13f0:	bf 91       	pop	r27
    13f2:	af 91       	pop	r26
    13f4:	9f 91       	pop	r25
    13f6:	8f 91       	pop	r24
    13f8:	7f 91       	pop	r23
    13fa:	6f 91       	pop	r22
    13fc:	5f 91       	pop	r21
    13fe:	4f 91       	pop	r20
    1400:	3f 91       	pop	r19
    1402:	2f 91       	pop	r18
    1404:	0f 90       	pop	r0
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	0f 90       	pop	r0
    140a:	1f 90       	pop	r1
    140c:	18 95       	reti

0000140e <__vector_3>:

//Interrupt Function INT2
void __vector_3(void){
    140e:	1f 92       	push	r1
    1410:	0f 92       	push	r0
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	0f 92       	push	r0
    1416:	11 24       	eor	r1, r1
    1418:	2f 93       	push	r18
    141a:	3f 93       	push	r19
    141c:	4f 93       	push	r20
    141e:	5f 93       	push	r21
    1420:	6f 93       	push	r22
    1422:	7f 93       	push	r23
    1424:	8f 93       	push	r24
    1426:	9f 93       	push	r25
    1428:	af 93       	push	r26
    142a:	bf 93       	push	r27
    142c:	ef 93       	push	r30
    142e:	ff 93       	push	r31
	if(GLOBAL_FUNCTION_ISR_PTRs[EXTI_INTERRUPT_PIN2] != NULL){
    1430:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <GLOBAL_FUNCTION_ISR_PTRs+0x4>
    1434:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <GLOBAL_FUNCTION_ISR_PTRs+0x5>
    1438:	30 97       	sbiw	r30, 0x00	; 0
    143a:	09 f0       	breq	.+2      	; 0x143e <__vector_3+0x30>
		GLOBAL_FUNCTION_ISR_PTRs[EXTI_INTERRUPT_PIN2]();
    143c:	09 95       	icall
	}
    143e:	ff 91       	pop	r31
    1440:	ef 91       	pop	r30
    1442:	bf 91       	pop	r27
    1444:	af 91       	pop	r26
    1446:	9f 91       	pop	r25
    1448:	8f 91       	pop	r24
    144a:	7f 91       	pop	r23
    144c:	6f 91       	pop	r22
    144e:	5f 91       	pop	r21
    1450:	4f 91       	pop	r20
    1452:	3f 91       	pop	r19
    1454:	2f 91       	pop	r18
    1456:	0f 90       	pop	r0
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	0f 90       	pop	r0
    145c:	1f 90       	pop	r1
    145e:	18 95       	reti

00001460 <enu_Calculate_CTC_Mode>:
	if(copy_pvid_parameter != NULL){
		local_pvid_parameter = copy_pvid_parameter;                           //saving the function parameter as a pointer to be used
	}
	
	return ES_OK;
}
    1460:	3f 92       	push	r3
    1462:	4f 92       	push	r4
    1464:	5f 92       	push	r5
    1466:	6f 92       	push	r6
    1468:	7f 92       	push	r7
    146a:	8f 92       	push	r8
    146c:	9f 92       	push	r9
    146e:	af 92       	push	r10
    1470:	bf 92       	push	r11
    1472:	cf 92       	push	r12
    1474:	df 92       	push	r13
    1476:	ef 92       	push	r14
    1478:	ff 92       	push	r15
    147a:	0f 93       	push	r16
    147c:	1f 93       	push	r17
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	4b 01       	movw	r8, r22
    1484:	5c 01       	movw	r10, r24
    1486:	29 01       	movw	r4, r18
    1488:	3a 01       	movw	r6, r20
    148a:	e7 01       	movw	r28, r14
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	34 e2       	ldi	r19, 0x24	; 36
    1490:	44 e7       	ldi	r20, 0x74	; 116
    1492:	5b e4       	ldi	r21, 0x4B	; 75
    1494:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__divsf3>
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e8       	ldi	r20, 0x80	; 128
    149e:	53 e4       	ldi	r21, 0x43	; 67
    14a0:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__mulsf3>
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	4a e7       	ldi	r20, 0x7A	; 122
    14aa:	54 e4       	ldi	r21, 0x44	; 68
    14ac:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__mulsf3>
    14b0:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__fixunssfsi>
    14b4:	36 2e       	mov	r3, r22
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__floatunsisf>
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	4a e7       	ldi	r20, 0x7A	; 122
    14c6:	54 e4       	ldi	r21, 0x44	; 68
    14c8:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__divsf3>
    14cc:	6b 01       	movw	r12, r22
    14ce:	7c 01       	movw	r14, r24
    14d0:	a5 01       	movw	r20, r10
    14d2:	94 01       	movw	r18, r8
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	74 e2       	ldi	r23, 0x24	; 36
    14d8:	84 e7       	ldi	r24, 0x74	; 116
    14da:	9b e4       	ldi	r25, 0x4B	; 75
    14dc:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__divsf3>
    14e0:	9b 01       	movw	r18, r22
    14e2:	ac 01       	movw	r20, r24
    14e4:	c7 01       	movw	r24, r14
    14e6:	b6 01       	movw	r22, r12
    14e8:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__mulsf3>
    14ec:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__fixunssfsi>
    14f0:	f8 01       	movw	r30, r16
    14f2:	60 83       	st	Z, r22
    14f4:	63 2d       	mov	r22, r3
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__floatsisf>
    1500:	9b 01       	movw	r18, r22
    1502:	ac 01       	movw	r20, r24
    1504:	c3 01       	movw	r24, r6
    1506:	b2 01       	movw	r22, r4
    1508:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__divsf3>
    150c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__fixunssfsi>
    1510:	79 83       	std	Y+1, r23	; 0x01
    1512:	68 83       	st	Y, r22
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	ff 90       	pop	r15
    1520:	ef 90       	pop	r14
    1522:	df 90       	pop	r13
    1524:	cf 90       	pop	r12
    1526:	bf 90       	pop	r11
    1528:	af 90       	pop	r10
    152a:	9f 90       	pop	r9
    152c:	8f 90       	pop	r8
    152e:	7f 90       	pop	r7
    1530:	6f 90       	pop	r6
    1532:	5f 90       	pop	r5
    1534:	4f 90       	pop	r4
    1536:	3f 90       	pop	r3
    1538:	08 95       	ret

0000153a <Timer0_enuInit>:
    153a:	83 b7       	in	r24, 0x33	; 51
    153c:	8f 7b       	andi	r24, 0xBF	; 191
    153e:	83 bf       	out	0x33, r24	; 51
    1540:	83 b7       	in	r24, 0x33	; 51
    1542:	88 60       	ori	r24, 0x08	; 8
    1544:	83 bf       	out	0x33, r24	; 51
    1546:	83 b7       	in	r24, 0x33	; 51
    1548:	84 60       	ori	r24, 0x04	; 4
    154a:	83 bf       	out	0x33, r24	; 51
    154c:	83 b7       	in	r24, 0x33	; 51
    154e:	8f 7d       	andi	r24, 0xDF	; 223
    1550:	83 bf       	out	0x33, r24	; 51
    1552:	83 b7       	in	r24, 0x33	; 51
    1554:	8f 7e       	andi	r24, 0xEF	; 239
    1556:	83 bf       	out	0x33, r24	; 51
    1558:	89 b7       	in	r24, 0x39	; 57
    155a:	83 60       	ori	r24, 0x03	; 3
    155c:	89 bf       	out	0x39, r24	; 57
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	08 95       	ret

00001562 <Timer0_enuPolling_SetTimer>:
    1562:	ef 92       	push	r14
    1564:	ff 92       	push	r15
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	00 d0       	rcall	.+0      	; 0x1570 <Timer0_enuPolling_SetTimer+0xe>
    1570:	1f 92       	push	r1
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	9b 01       	movw	r18, r22
    1578:	ac 01       	movw	r20, r24
    157a:	ce 01       	movw	r24, r28
    157c:	02 96       	adiw	r24, 0x02	; 2
    157e:	7c 01       	movw	r14, r24
    1580:	8e 01       	movw	r16, r28
    1582:	0f 5f       	subi	r16, 0xFF	; 255
    1584:	1f 4f       	sbci	r17, 0xFF	; 255
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	80 e8       	ldi	r24, 0x80	; 128
    158c:	93 e4       	ldi	r25, 0x43	; 67
    158e:	0e 94 30 0a 	call	0x1460	; 0x1460 <enu_Calculate_CTC_Mode>
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	8c bf       	out	0x3c, r24	; 60
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	08 c0       	rjmp	.+16     	; 0x15ac <Timer0_enuPolling_SetTimer+0x4a>
    159c:	2f 5f       	subi	r18, 0xFF	; 255
    159e:	3f 4f       	sbci	r19, 0xFF	; 255
    15a0:	08 b6       	in	r0, 0x38	; 56
    15a2:	01 fe       	sbrs	r0, 1
    15a4:	fd cf       	rjmp	.-6      	; 0x15a0 <Timer0_enuPolling_SetTimer+0x3e>
    15a6:	88 b7       	in	r24, 0x38	; 56
    15a8:	82 60       	ori	r24, 0x02	; 2
    15aa:	88 bf       	out	0x38, r24	; 56
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	9b 81       	ldd	r25, Y+3	; 0x03
    15b0:	28 17       	cp	r18, r24
    15b2:	39 07       	cpc	r19, r25
    15b4:	99 f7       	brne	.-26     	; 0x159c <Timer0_enuPolling_SetTimer+0x3a>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	1f 91       	pop	r17
    15c4:	0f 91       	pop	r16
    15c6:	ff 90       	pop	r15
    15c8:	ef 90       	pop	r14
    15ca:	08 95       	ret

000015cc <__vector_10>:

void __vector_11(void)__attribute__((signal));				// Timer0 Normal Overflow ISR
void __vector_10(void)__attribute__((signal));				// Timer0 CTC ISR

void __vector_10(){
    15cc:	1f 92       	push	r1
    15ce:	0f 92       	push	r0
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	0f 92       	push	r0
    15d4:	11 24       	eor	r1, r1
    15d6:	2f 93       	push	r18
    15d8:	3f 93       	push	r19
    15da:	4f 93       	push	r20
    15dc:	5f 93       	push	r21
    15de:	6f 93       	push	r22
    15e0:	7f 93       	push	r23
    15e2:	8f 93       	push	r24
    15e4:	9f 93       	push	r25
    15e6:	af 93       	push	r26
    15e8:	bf 93       	push	r27
    15ea:	ef 93       	push	r30
    15ec:	ff 93       	push	r31
	
	static u16 local_u16_interrupts = 0;                        // every time a compare is matched between TCNT0 and OCR0 this interrupt is executed
	local_u16_interrupts++;
    15ee:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <local_u16_interrupts.1700>
    15f2:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <local_u16_interrupts.1700+0x1>
    15f6:	01 96       	adiw	r24, 0x01	; 1
    15f8:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <local_u16_interrupts.1700+0x1>
    15fc:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <local_u16_interrupts.1700>
	
	if(local_u16_interrupts == Timer0_U16_CTC_Interrupts){
    1600:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <Timer0_U16_CTC_Interrupts>
    1604:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <Timer0_U16_CTC_Interrupts+0x1>
    1608:	82 17       	cp	r24, r18
    160a:	93 07       	cpc	r25, r19
    160c:	89 f4       	brne	.+34     	; 0x1630 <__vector_10+0x64>
		local_u16_interrupts = 0;
    160e:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <local_u16_interrupts.1700+0x1>
    1612:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <local_u16_interrupts.1700>
		//stop timer and execute the desired function
		if(local_pvid_fun[1]!=NULL){
    1616:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <local_pvid_fun+0x2>
    161a:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <local_pvid_fun+0x3>
    161e:	30 97       	sbiw	r30, 0x00	; 0
    1620:	39 f0       	breq	.+14     	; 0x1630 <__vector_10+0x64>
			if(local_pvid_parameter == NULL){
    1622:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <local_pvid_parameter>
    1626:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <local_pvid_parameter+0x1>
    162a:	89 2b       	or	r24, r25
    162c:	09 f4       	brne	.+2      	; 0x1630 <__vector_10+0x64>
				local_pvid_fun[1]();
    162e:	09 95       	icall
			}
		}
	}
}
    1630:	ff 91       	pop	r31
    1632:	ef 91       	pop	r30
    1634:	bf 91       	pop	r27
    1636:	af 91       	pop	r26
    1638:	9f 91       	pop	r25
    163a:	8f 91       	pop	r24
    163c:	7f 91       	pop	r23
    163e:	6f 91       	pop	r22
    1640:	5f 91       	pop	r21
    1642:	4f 91       	pop	r20
    1644:	3f 91       	pop	r19
    1646:	2f 91       	pop	r18
    1648:	0f 90       	pop	r0
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	0f 90       	pop	r0
    164e:	1f 90       	pop	r1
    1650:	18 95       	reti

00001652 <__vector_11>:

void __vector_11(){
    1652:	1f 92       	push	r1
    1654:	0f 92       	push	r0
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	0f 92       	push	r0
    165a:	11 24       	eor	r1, r1
    165c:	2f 93       	push	r18
    165e:	3f 93       	push	r19
    1660:	4f 93       	push	r20
    1662:	5f 93       	push	r21
    1664:	6f 93       	push	r22
    1666:	7f 93       	push	r23
    1668:	8f 93       	push	r24
    166a:	9f 93       	push	r25
    166c:	af 93       	push	r26
    166e:	bf 93       	push	r27
    1670:	ef 93       	push	r30
    1672:	ff 93       	push	r31
	
	static u16 local_u16_count = 0;                             // every time TCNT0 overflows this interrupts is executed
	local_u16_count++;
    1674:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <local_u16_count.1703>
    1678:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <local_u16_count.1703+0x1>
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <local_u16_count.1703+0x1>
    1682:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <local_u16_count.1703>
	
	if(local_u16_count == Timer0_U16_Ovfs_Needed-1){
    1686:	01 96       	adiw	r24, 0x01	; 1
    1688:	09 f4       	brne	.+2      	; 0x168c <__vector_11+0x3a>
		TCNT0 = Timer0_U8_Preload;
    168a:	12 be       	out	0x32, r1	; 50
	}
	
	if(local_u16_count == Timer0_U16_Ovfs_Needed){
    168c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <local_u16_count.1703>
    1690:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <local_u16_count.1703+0x1>
    1694:	89 2b       	or	r24, r25
    1696:	89 f4       	brne	.+34     	; 0x16ba <__vector_11+0x68>
		local_u16_count = 0;
    1698:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <local_u16_count.1703+0x1>
    169c:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <local_u16_count.1703>
		//stop timer and execute the desired function
		if(local_pvid_fun[0]!=NULL){
    16a0:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <local_pvid_fun>
    16a4:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <local_pvid_fun+0x1>
    16a8:	30 97       	sbiw	r30, 0x00	; 0
    16aa:	39 f0       	breq	.+14     	; 0x16ba <__vector_11+0x68>
			if(local_pvid_parameter == NULL){
    16ac:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <local_pvid_parameter>
    16b0:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <local_pvid_parameter+0x1>
    16b4:	89 2b       	or	r24, r25
    16b6:	09 f4       	brne	.+2      	; 0x16ba <__vector_11+0x68>
				local_pvid_fun[0]();
    16b8:	09 95       	icall
			}
		}
	}
    16ba:	ff 91       	pop	r31
    16bc:	ef 91       	pop	r30
    16be:	bf 91       	pop	r27
    16c0:	af 91       	pop	r26
    16c2:	9f 91       	pop	r25
    16c4:	8f 91       	pop	r24
    16c6:	7f 91       	pop	r23
    16c8:	6f 91       	pop	r22
    16ca:	5f 91       	pop	r21
    16cc:	4f 91       	pop	r20
    16ce:	3f 91       	pop	r19
    16d0:	2f 91       	pop	r18
    16d2:	0f 90       	pop	r0
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	0f 90       	pop	r0
    16d8:	1f 90       	pop	r1
    16da:	18 95       	reti

000016dc <enu_SetPwm>:
	u16 local_u16_OCR1B_value;
	
	
	//If PWM Mode is Fast PWM
	#if ((PWM_MODE == PWM_FAST_8BIT_2X) || (PWM_MODE == PWM_FAST_9BIT_2X) || (PWM_MODE == PWM_FAST_10BIT_2X) || (PWM_MODE == PWM_FAST_1X_TOP_UPDATE) || (PWM_MODE == PWM_FAST_2X_TOP_UPDATE))
		switch(copy_u8_channel){
    16dc:	81 34       	cpi	r24, 0x41	; 65
    16de:	19 f0       	breq	.+6      	; 0x16e6 <enu_SetPwm+0xa>
    16e0:	82 34       	cpi	r24, 0x42	; 66
    16e2:	89 f0       	breq	.+34     	; 0x1706 <enu_SetPwm+0x2a>
    16e4:	1f c0       	rjmp	.+62     	; 0x1724 <enu_SetPwm+0x48>
			case 'A':
				#if (PWM_OC1A_OUTPUT_MODE == PWM_OC1A_NON_INVERTED)
					local_u16_OCR1A_value = ((copy_u8_dutycycle * ((u32)copy_u16_top)) / 100) - 1;
    16e6:	9a 01       	movw	r18, r20
    16e8:	a6 2f       	mov	r26, r22
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <__umulhisi3>
    16f0:	24 e6       	ldi	r18, 0x64	; 100
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	50 e0       	ldi	r21, 0x00	; 0
    16f8:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__udivmodsi4>
    16fc:	21 50       	subi	r18, 0x01	; 1
    16fe:	31 09       	sbc	r19, r1
				#elif (PWM_OC1A_OUTPUT_MODE == PWM_OC1A_INVERTED)
					local_u16_OCR1A_value = ((u32)copy_u16_top - ((copy_u8_dutycycle * ((u32)copy_u16_top + 1)) / 100));
				#else
					#warning "Cannot use this OC1A-Pin configuration to generate PWM"
				#endif
				OCR1AH = (local_u16_OCR1A_value >> 8);     //writing upper bits first
    1700:	3b bd       	out	0x2b, r19	; 43
				OCR1AL = (local_u16_OCR1A_value);		  //writing lower bits
    1702:	2a bd       	out	0x2a, r18	; 42
			break;
    1704:	0f c0       	rjmp	.+30     	; 0x1724 <enu_SetPwm+0x48>
			
			case 'B':
				#if (PWM_OC1B_OUTPUT_MODE == PWM_OC1B_NON_INVERTED)
					local_u16_OCR1B_value = ((copy_u8_dutycycle * ((u32)copy_u16_top)) / 100) - 1;
    1706:	9a 01       	movw	r18, r20
    1708:	a6 2f       	mov	r26, r22
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <__umulhisi3>
    1710:	24 e6       	ldi	r18, 0x64	; 100
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e0       	ldi	r20, 0x00	; 0
    1716:	50 e0       	ldi	r21, 0x00	; 0
    1718:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__udivmodsi4>
    171c:	21 50       	subi	r18, 0x01	; 1
    171e:	31 09       	sbc	r19, r1
				#elif (PWM_OC1B_OUTPUT_MODE == PWM_OC1B_INVERTED)
					local_u16_OCR1B_value = ((u32)copy_u16_top - ((copy_u8_dutycycle * ((u32)copy_u16_top + 1)) / 100));
				#else
					#warning "Cannot use this OC1B-Pin configuration to generate PWM"
				#endif
				OCR1BH = (local_u16_OCR1B_value >> 8);     //writing upper bits first
    1720:	39 bd       	out	0x29, r19	; 41
				OCR1BL = (local_u16_OCR1B_value);		  //writing lower bits
    1722:	28 bd       	out	0x28, r18	; 40
			break;
		}
	#endif
	
	return local_enu_errorstate;
}
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	08 95       	ret

00001728 <PWM_enuInit>:

//Private Libraries
#include "PWM_Config.h"
#include "PWM_Priv.h"

ES PWM_enuInit(){
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	00 d0       	rcall	.+0      	; 0x172e <PWM_enuInit+0x6>
    172e:	00 d0       	rcall	.+0      	; 0x1730 <PWM_enuInit+0x8>
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
		PWM_MODE == PWM_PHASE_CORRECT_2X_TOP_UPDATE ||				\
		PWM_MODE == PWM_PHASE_CORRECT_1X_TOP_UPDATE ||				\
		PWM_MODE == PWM_FAST_2X_TOP_UPDATE ||						\
		PWM_MODE == PWM_FAST_1X_TOP_UPDATE)							
		
		local_aenu_errorstate[0] = ES_OK;
    1734:	19 82       	std	Y+1, r1	; 0x01
		//Since mode have 4 bits two in a register and other two in different register so we have to select each two bits and write to the registers at there positions
		TCCR1A |= (PWM_MODE & 0b11);						//masking first 2 bits two get them then write them at bit 0 and bit 1 
    1736:	8f b5       	in	r24, 0x2f	; 47
    1738:	83 60       	ori	r24, 0x03	; 3
    173a:	8f bd       	out	0x2f, r24	; 47
		u8 local_u8_upperbits = ((PWM_MODE >> 2) & (0b11)); //selecting the next two bits 
		TCCR1B |= (local_u8_upperbits << 3);                //writing the upper bits at there current location in TCCR1B
    173c:	8e b5       	in	r24, 0x2e	; 46
    173e:	88 60       	ori	r24, 0x08	; 8
    1740:	8e bd       	out	0x2e, r24	; 46
		#error "PWM Mode Configurartion Error Invalid Mode"
	#endif
	
	//Setting PWM-Prescaler
	#if ((PWM_PRESCALLER >= 0) && (PWM_PRESCALLER <= 7))
		local_aenu_errorstate[1] = ES_OK;
    1742:	1a 82       	std	Y+2, r1	; 0x02
		TCCR1B |= PWM_PRESCALLER;
    1744:	8e b5       	in	r24, 0x2e	; 46
    1746:	83 60       	ori	r24, 0x03	; 3
    1748:	8e bd       	out	0x2e, r24	; 46
	#endif
	
	//Setting OC1A and OC1B Output Mode (Normal-Inverted-NonInverted) 
	//1-OC1A
	#if ((PWM_OC1A_OUTPUT_MODE == PWM_OC1A_NORMAL) || (PWM_OC1A_OUTPUT_MODE == PWM_OC1A_NON_INVERTED) || (PWM_OC1A_OUTPUT_MODE == PWM_OC1A_INVERTED))
		local_aenu_errorstate[2] = ES_OK;
    174a:	1b 82       	std	Y+3, r1	; 0x03
		TCCR1A |= (PWM_OC1A_OUTPUT_MODE << 6);  //writing the output pin mode of OC1A at its configuaration bits number 6 and 7 in TCCR1A
    174c:	8f b5       	in	r24, 0x2f	; 47
    174e:	80 68       	ori	r24, 0x80	; 128
    1750:	8f bd       	out	0x2f, r24	; 47
		local_enu_errorstate[2] = ES_OUT_OF_RANGE;
		#error "PWM Configuration Error in PWM_OC1A_OUTPUT_MODE"
	#endif
	//2-OC1B
	#if ((PWM_OC1B_OUTPUT_MODE == PWM_OC1B_NORMAL) || (PWM_OC1B_OUTPUT_MODE == PWM_OC1B_NON_INVERTED) || (PWM_OC1B_OUTPUT_MODE == PWM_OC1B_INVERTED))
		local_aenu_errorstate[3] = ES_OK;
    1752:	1c 82       	std	Y+4, r1	; 0x04
		TCCR1A |= (PWM_OC1B_OUTPUT_MODE << 4);  //writing the output pin mode of OC1A at its configuaration bits number 6 and 7 in TCCR1A
    1754:	8f b5       	in	r24, 0x2f	; 47
    1756:	80 6a       	ori	r24, 0xA0	; 160
    1758:	8f bd       	out	0x2f, r24	; 47
	#else
		local_enu_errorstate[3] = ES_OUT_OF_RANGE;
		#error "PWM Configuration Error in PWM_OC1B_OUTPUT_MODE"
	#endif
	
	for(u8 i = 0; i < 4; i++){
    175a:	90 e0       	ldi	r25, 0x00	; 0
#include "PWM_Priv.h"

ES PWM_enuInit(){
	
	ES local_aenu_errorstate[4];
	ES local_enu_errorstate = ES_NOK;
    175c:	81 e0       	ldi	r24, 0x01	; 1
	#else
		local_enu_errorstate[3] = ES_OUT_OF_RANGE;
		#error "PWM Configuration Error in PWM_OC1B_OUTPUT_MODE"
	#endif
	
	for(u8 i = 0; i < 4; i++){
    175e:	0a c0       	rjmp	.+20     	; 0x1774 <PWM_enuInit+0x4c>
		local_enu_errorstate = local_aenu_errorstate[i];
    1760:	e1 e0       	ldi	r30, 0x01	; 1
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	ec 0f       	add	r30, r28
    1766:	fd 1f       	adc	r31, r29
    1768:	e9 0f       	add	r30, r25
    176a:	f1 1d       	adc	r31, r1
    176c:	80 81       	ld	r24, Z
		if(local_enu_errorstate != ES_OK){
    176e:	81 11       	cpse	r24, r1
    1770:	03 c0       	rjmp	.+6      	; 0x1778 <PWM_enuInit+0x50>
	#else
		local_enu_errorstate[3] = ES_OUT_OF_RANGE;
		#error "PWM Configuration Error in PWM_OC1B_OUTPUT_MODE"
	#endif
	
	for(u8 i = 0; i < 4; i++){
    1772:	9f 5f       	subi	r25, 0xFF	; 255
    1774:	94 30       	cpi	r25, 0x04	; 4
    1776:	a0 f3       	brcs	.-24     	; 0x1760 <PWM_enuInit+0x38>
		if(local_enu_errorstate != ES_OK){
			return local_enu_errorstate;
		}
	}
	return local_enu_errorstate;
}
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	08 95       	ret

00001786 <PWM_enuGeneratePWM_FixedFreq>:
	#endif
	
	return local_enu_errorstate;
}

ES PWM_enuGeneratePWM_FixedFreq(u8 copy_u8_dutycycle_A, u8 copy_u8_dutycycle_B){
    1786:	1f 93       	push	r17
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	00 d0       	rcall	.+0      	; 0x178e <PWM_enuGeneratePWM_FixedFreq+0x8>
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	16 2f       	mov	r17, r22
		break;

		case PWM_FAST_10BIT_2X:
		case PWM_PHASE_CORRECT_10BIT_2X:
			//Set PWM for 10-bit mode
			local_aenu_errorstate[0] = enu_SetPwm(local_enu_channelA, copy_u8_dutycycle_A, PWM_TOP_1024);
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	54 e0       	ldi	r21, 0x04	; 4
    1798:	68 2f       	mov	r22, r24
    179a:	81 e4       	ldi	r24, 0x41	; 65
    179c:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <enu_SetPwm>
    17a0:	89 83       	std	Y+1, r24	; 0x01
			local_aenu_errorstate[1] = enu_SetPwm(local_enu_channelB, copy_u8_dutycycle_B, PWM_TOP_1024);
    17a2:	40 e0       	ldi	r20, 0x00	; 0
    17a4:	54 e0       	ldi	r21, 0x04	; 4
    17a6:	61 2f       	mov	r22, r17
    17a8:	82 e4       	ldi	r24, 0x42	; 66
    17aa:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <enu_SetPwm>
    17ae:	8a 83       	std	Y+2, r24	; 0x02
			local_aenu_errorstate[0] = ES_OUT_OF_RANGE;
			local_aenu_errorstate[1] = ES_OUT_OF_RANGE;
		break;
	}
	
	for(u8 i = 0; i < 2; i++){
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	0a c0       	rjmp	.+20     	; 0x17c8 <PWM_enuGeneratePWM_FixedFreq+0x42>
		if(local_enu_errorstate == local_aenu_errorstate[i]){
    17b4:	e1 e0       	ldi	r30, 0x01	; 1
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	ec 0f       	add	r30, r28
    17ba:	fd 1f       	adc	r31, r29
    17bc:	e8 0f       	add	r30, r24
    17be:	f1 1d       	adc	r31, r1
    17c0:	90 81       	ld	r25, Z
    17c2:	91 30       	cpi	r25, 0x01	; 1
    17c4:	19 f0       	breq	.+6      	; 0x17cc <PWM_enuGeneratePWM_FixedFreq+0x46>
			local_aenu_errorstate[0] = ES_OUT_OF_RANGE;
			local_aenu_errorstate[1] = ES_OUT_OF_RANGE;
		break;
	}
	
	for(u8 i = 0; i < 2; i++){
    17c6:	8f 5f       	subi	r24, 0xFF	; 255
    17c8:	82 30       	cpi	r24, 0x02	; 2
    17ca:	a0 f3       	brcs	.-24     	; 0x17b4 <PWM_enuGeneratePWM_FixedFreq+0x2e>
				return local_enu_errorstate;
			}
		}
	}
	return local_enu_errorstate;
}
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	1f 91       	pop	r17
    17d8:	08 95       	ret

000017da <Timer2_enuInit>:
			TCCR2 |= (1<<3);
		#elif TIMER2_OPERATION_MODE == TIMER2_PHASECORRECT_PWM
			TCCR2 |= (1<<6);
			TCCR2 &= ~(1<<3);
		#elif TIMER2_OPERATION_MODE == TIMER2_FAST_PWM
			TCCR2 |= (1<<6);
    17da:	85 b5       	in	r24, 0x25	; 37
    17dc:	80 64       	ori	r24, 0x40	; 64
    17de:	85 bd       	out	0x25, r24	; 37
			TCCR2 |= (1<<3);
    17e0:	85 b5       	in	r24, 0x25	; 37
    17e2:	88 60       	ori	r24, 0x08	; 8
    17e4:	85 bd       	out	0x25, r24	; 37
	#endif
	
	//Set Timer Prescaler
	#if ((TIMER2_PRESCALER >= 0) && (TIMER2_PRESCALER <= 7))
		local_enu_errorstate = ES_OK;
		TCCR2 |= TIMER2_PRESCALER;
    17e6:	85 b5       	in	r24, 0x25	; 37
    17e8:	84 60       	ori	r24, 0x04	; 4
    17ea:	85 bd       	out	0x25, r24	; 37
				TCCR2 &= ~(1<<4);
			#elif TIMER2_OC2_MODE == TIMER2_OC2_RESERVED
				TCCR2 &= ~(1<<5);
				TCCR2 |= (1<<4);
			#elif TIMER2_OC2_MODE == TIMER2_OC2_NON_INVERTED
				TCCR2 |= (1<<5);
    17ec:	85 b5       	in	r24, 0x25	; 37
    17ee:	80 62       	ori	r24, 0x20	; 32
    17f0:	85 bd       	out	0x25, r24	; 37
				TCCR2 &= ~(1<<4);
    17f2:	85 b5       	in	r24, 0x25	; 37
    17f4:	8f 7e       	andi	r24, 0xEF	; 239
    17f6:	85 bd       	out	0x25, r24	; 37
	#if	((TIMER2_SERVICE_MODE == TIMER2_POLLING_MODE) || (TIMER2_SERVICE_MODE == TIMER2_INTERRUPT_MODE))
		local_enu_errorstate = ES_OK;
		#if TIMER2_SERVICE_MODE == TIMER2_POLLING_MODE
			TIMSK &= ~(3 << 5);  // 3 --> 0000 0011 so clearing first two bits
		#elif TIMER2_SERVICE_MODE == TIMER2_INTERRUPT_MODE
			TIMSK |= (3 << 5);
    17f8:	89 b7       	in	r24, 0x39	; 57
    17fa:	80 66       	ori	r24, 0x60	; 96
    17fc:	89 bf       	out	0x39, r24	; 57
		local_enu_errorstate = ES_NOK;
		#error "Timer2 Configuration Error in Timer System Mode"
	#endif
	
	return local_enu_errorstate;
}
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	08 95       	ret

00001802 <Timer2_enuGeneratePWM>:

	switch(TIMER2_OPERATION_MODE){
		
		case TIMER2_FAST_PWM:
			#if (TIMER2_OC2_MODE == TIMER2_OC2_NON_INVERTED)
				local_u8_OCRvalue = ((copy_u8_dutycycle * (TIMER2_TOP)) / 100) - 1;
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	a0 e0       	ldi	r26, 0x00	; 0
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	66 27       	eor	r22, r22
    180a:	78 2f       	mov	r23, r24
    180c:	89 2f       	mov	r24, r25
    180e:	9a 2f       	mov	r25, r26
    1810:	24 e6       	ldi	r18, 0x64	; 100
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e0       	ldi	r20, 0x00	; 0
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__udivmodsi4>
    181c:	21 50       	subi	r18, 0x01	; 1
			#elif (TIMER2_OC2_MODE == TIMER2_OC2_INVERTED)
				local_u8_OCRvalue = (TIMER2_TOP - ((copy_u8_dutycycle * (TIMER2_TOP + 1)) / 100));
			#endif
			local_enu_errorstate = ES_OK;
			OCR2 = local_u8_OCRvalue;
    181e:	23 bd       	out	0x23, r18	; 35
			local_enu_errorstate = ES_OK;
			OCR2 = local_u8_OCRvalue;
		break;
	}
	return local_enu_errorstate;
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	08 95       	ret

00001824 <__subsf3>:
    1824:	50 58       	subi	r21, 0x80	; 128

00001826 <__addsf3>:
    1826:	bb 27       	eor	r27, r27
    1828:	aa 27       	eor	r26, r26
    182a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__addsf3x>
    182e:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__fp_round>
    1832:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__fp_pscA>
    1836:	38 f0       	brcs	.+14     	; 0x1846 <__addsf3+0x20>
    1838:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__fp_pscB>
    183c:	20 f0       	brcs	.+8      	; 0x1846 <__addsf3+0x20>
    183e:	39 f4       	brne	.+14     	; 0x184e <__addsf3+0x28>
    1840:	9f 3f       	cpi	r25, 0xFF	; 255
    1842:	19 f4       	brne	.+6      	; 0x184a <__addsf3+0x24>
    1844:	26 f4       	brtc	.+8      	; 0x184e <__addsf3+0x28>
    1846:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__fp_nan>
    184a:	0e f4       	brtc	.+2      	; 0x184e <__addsf3+0x28>
    184c:	e0 95       	com	r30
    184e:	e7 fb       	bst	r30, 7
    1850:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__fp_inf>

00001854 <__addsf3x>:
    1854:	e9 2f       	mov	r30, r25
    1856:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__fp_split3>
    185a:	58 f3       	brcs	.-42     	; 0x1832 <__addsf3+0xc>
    185c:	ba 17       	cp	r27, r26
    185e:	62 07       	cpc	r22, r18
    1860:	73 07       	cpc	r23, r19
    1862:	84 07       	cpc	r24, r20
    1864:	95 07       	cpc	r25, r21
    1866:	20 f0       	brcs	.+8      	; 0x1870 <__addsf3x+0x1c>
    1868:	79 f4       	brne	.+30     	; 0x1888 <__addsf3x+0x34>
    186a:	a6 f5       	brtc	.+104    	; 0x18d4 <__addsf3x+0x80>
    186c:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__fp_zero>
    1870:	0e f4       	brtc	.+2      	; 0x1874 <__addsf3x+0x20>
    1872:	e0 95       	com	r30
    1874:	0b 2e       	mov	r0, r27
    1876:	ba 2f       	mov	r27, r26
    1878:	a0 2d       	mov	r26, r0
    187a:	0b 01       	movw	r0, r22
    187c:	b9 01       	movw	r22, r18
    187e:	90 01       	movw	r18, r0
    1880:	0c 01       	movw	r0, r24
    1882:	ca 01       	movw	r24, r20
    1884:	a0 01       	movw	r20, r0
    1886:	11 24       	eor	r1, r1
    1888:	ff 27       	eor	r31, r31
    188a:	59 1b       	sub	r21, r25
    188c:	99 f0       	breq	.+38     	; 0x18b4 <__addsf3x+0x60>
    188e:	59 3f       	cpi	r21, 0xF9	; 249
    1890:	50 f4       	brcc	.+20     	; 0x18a6 <__addsf3x+0x52>
    1892:	50 3e       	cpi	r21, 0xE0	; 224
    1894:	68 f1       	brcs	.+90     	; 0x18f0 <__addsf3x+0x9c>
    1896:	1a 16       	cp	r1, r26
    1898:	f0 40       	sbci	r31, 0x00	; 0
    189a:	a2 2f       	mov	r26, r18
    189c:	23 2f       	mov	r18, r19
    189e:	34 2f       	mov	r19, r20
    18a0:	44 27       	eor	r20, r20
    18a2:	58 5f       	subi	r21, 0xF8	; 248
    18a4:	f3 cf       	rjmp	.-26     	; 0x188c <__addsf3x+0x38>
    18a6:	46 95       	lsr	r20
    18a8:	37 95       	ror	r19
    18aa:	27 95       	ror	r18
    18ac:	a7 95       	ror	r26
    18ae:	f0 40       	sbci	r31, 0x00	; 0
    18b0:	53 95       	inc	r21
    18b2:	c9 f7       	brne	.-14     	; 0x18a6 <__addsf3x+0x52>
    18b4:	7e f4       	brtc	.+30     	; 0x18d4 <__addsf3x+0x80>
    18b6:	1f 16       	cp	r1, r31
    18b8:	ba 0b       	sbc	r27, r26
    18ba:	62 0b       	sbc	r22, r18
    18bc:	73 0b       	sbc	r23, r19
    18be:	84 0b       	sbc	r24, r20
    18c0:	ba f0       	brmi	.+46     	; 0x18f0 <__addsf3x+0x9c>
    18c2:	91 50       	subi	r25, 0x01	; 1
    18c4:	a1 f0       	breq	.+40     	; 0x18ee <__addsf3x+0x9a>
    18c6:	ff 0f       	add	r31, r31
    18c8:	bb 1f       	adc	r27, r27
    18ca:	66 1f       	adc	r22, r22
    18cc:	77 1f       	adc	r23, r23
    18ce:	88 1f       	adc	r24, r24
    18d0:	c2 f7       	brpl	.-16     	; 0x18c2 <__addsf3x+0x6e>
    18d2:	0e c0       	rjmp	.+28     	; 0x18f0 <__addsf3x+0x9c>
    18d4:	ba 0f       	add	r27, r26
    18d6:	62 1f       	adc	r22, r18
    18d8:	73 1f       	adc	r23, r19
    18da:	84 1f       	adc	r24, r20
    18dc:	48 f4       	brcc	.+18     	; 0x18f0 <__addsf3x+0x9c>
    18de:	87 95       	ror	r24
    18e0:	77 95       	ror	r23
    18e2:	67 95       	ror	r22
    18e4:	b7 95       	ror	r27
    18e6:	f7 95       	ror	r31
    18e8:	9e 3f       	cpi	r25, 0xFE	; 254
    18ea:	08 f0       	brcs	.+2      	; 0x18ee <__addsf3x+0x9a>
    18ec:	b0 cf       	rjmp	.-160    	; 0x184e <__addsf3+0x28>
    18ee:	93 95       	inc	r25
    18f0:	88 0f       	add	r24, r24
    18f2:	08 f0       	brcs	.+2      	; 0x18f6 <__addsf3x+0xa2>
    18f4:	99 27       	eor	r25, r25
    18f6:	ee 0f       	add	r30, r30
    18f8:	97 95       	ror	r25
    18fa:	87 95       	ror	r24
    18fc:	08 95       	ret

000018fe <__divsf3>:
    18fe:	0e 94 93 0c 	call	0x1926	; 0x1926 <__divsf3x>
    1902:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__fp_round>
    1906:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__fp_pscB>
    190a:	58 f0       	brcs	.+22     	; 0x1922 <__divsf3+0x24>
    190c:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__fp_pscA>
    1910:	40 f0       	brcs	.+16     	; 0x1922 <__divsf3+0x24>
    1912:	29 f4       	brne	.+10     	; 0x191e <__divsf3+0x20>
    1914:	5f 3f       	cpi	r21, 0xFF	; 255
    1916:	29 f0       	breq	.+10     	; 0x1922 <__divsf3+0x24>
    1918:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__fp_inf>
    191c:	51 11       	cpse	r21, r1
    191e:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__fp_szero>
    1922:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__fp_nan>

00001926 <__divsf3x>:
    1926:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__fp_split3>
    192a:	68 f3       	brcs	.-38     	; 0x1906 <__divsf3+0x8>

0000192c <__divsf3_pse>:
    192c:	99 23       	and	r25, r25
    192e:	b1 f3       	breq	.-20     	; 0x191c <__divsf3+0x1e>
    1930:	55 23       	and	r21, r21
    1932:	91 f3       	breq	.-28     	; 0x1918 <__divsf3+0x1a>
    1934:	95 1b       	sub	r25, r21
    1936:	55 0b       	sbc	r21, r21
    1938:	bb 27       	eor	r27, r27
    193a:	aa 27       	eor	r26, r26
    193c:	62 17       	cp	r22, r18
    193e:	73 07       	cpc	r23, r19
    1940:	84 07       	cpc	r24, r20
    1942:	38 f0       	brcs	.+14     	; 0x1952 <__divsf3_pse+0x26>
    1944:	9f 5f       	subi	r25, 0xFF	; 255
    1946:	5f 4f       	sbci	r21, 0xFF	; 255
    1948:	22 0f       	add	r18, r18
    194a:	33 1f       	adc	r19, r19
    194c:	44 1f       	adc	r20, r20
    194e:	aa 1f       	adc	r26, r26
    1950:	a9 f3       	breq	.-22     	; 0x193c <__divsf3_pse+0x10>
    1952:	35 d0       	rcall	.+106    	; 0x19be <__divsf3_pse+0x92>
    1954:	0e 2e       	mov	r0, r30
    1956:	3a f0       	brmi	.+14     	; 0x1966 <__divsf3_pse+0x3a>
    1958:	e0 e8       	ldi	r30, 0x80	; 128
    195a:	32 d0       	rcall	.+100    	; 0x19c0 <__divsf3_pse+0x94>
    195c:	91 50       	subi	r25, 0x01	; 1
    195e:	50 40       	sbci	r21, 0x00	; 0
    1960:	e6 95       	lsr	r30
    1962:	00 1c       	adc	r0, r0
    1964:	ca f7       	brpl	.-14     	; 0x1958 <__divsf3_pse+0x2c>
    1966:	2b d0       	rcall	.+86     	; 0x19be <__divsf3_pse+0x92>
    1968:	fe 2f       	mov	r31, r30
    196a:	29 d0       	rcall	.+82     	; 0x19be <__divsf3_pse+0x92>
    196c:	66 0f       	add	r22, r22
    196e:	77 1f       	adc	r23, r23
    1970:	88 1f       	adc	r24, r24
    1972:	bb 1f       	adc	r27, r27
    1974:	26 17       	cp	r18, r22
    1976:	37 07       	cpc	r19, r23
    1978:	48 07       	cpc	r20, r24
    197a:	ab 07       	cpc	r26, r27
    197c:	b0 e8       	ldi	r27, 0x80	; 128
    197e:	09 f0       	breq	.+2      	; 0x1982 <__divsf3_pse+0x56>
    1980:	bb 0b       	sbc	r27, r27
    1982:	80 2d       	mov	r24, r0
    1984:	bf 01       	movw	r22, r30
    1986:	ff 27       	eor	r31, r31
    1988:	93 58       	subi	r25, 0x83	; 131
    198a:	5f 4f       	sbci	r21, 0xFF	; 255
    198c:	3a f0       	brmi	.+14     	; 0x199c <__divsf3_pse+0x70>
    198e:	9e 3f       	cpi	r25, 0xFE	; 254
    1990:	51 05       	cpc	r21, r1
    1992:	78 f0       	brcs	.+30     	; 0x19b2 <__divsf3_pse+0x86>
    1994:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__fp_inf>
    1998:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__fp_szero>
    199c:	5f 3f       	cpi	r21, 0xFF	; 255
    199e:	e4 f3       	brlt	.-8      	; 0x1998 <__divsf3_pse+0x6c>
    19a0:	98 3e       	cpi	r25, 0xE8	; 232
    19a2:	d4 f3       	brlt	.-12     	; 0x1998 <__divsf3_pse+0x6c>
    19a4:	86 95       	lsr	r24
    19a6:	77 95       	ror	r23
    19a8:	67 95       	ror	r22
    19aa:	b7 95       	ror	r27
    19ac:	f7 95       	ror	r31
    19ae:	9f 5f       	subi	r25, 0xFF	; 255
    19b0:	c9 f7       	brne	.-14     	; 0x19a4 <__divsf3_pse+0x78>
    19b2:	88 0f       	add	r24, r24
    19b4:	91 1d       	adc	r25, r1
    19b6:	96 95       	lsr	r25
    19b8:	87 95       	ror	r24
    19ba:	97 f9       	bld	r25, 7
    19bc:	08 95       	ret
    19be:	e1 e0       	ldi	r30, 0x01	; 1
    19c0:	66 0f       	add	r22, r22
    19c2:	77 1f       	adc	r23, r23
    19c4:	88 1f       	adc	r24, r24
    19c6:	bb 1f       	adc	r27, r27
    19c8:	62 17       	cp	r22, r18
    19ca:	73 07       	cpc	r23, r19
    19cc:	84 07       	cpc	r24, r20
    19ce:	ba 07       	cpc	r27, r26
    19d0:	20 f0       	brcs	.+8      	; 0x19da <__divsf3_pse+0xae>
    19d2:	62 1b       	sub	r22, r18
    19d4:	73 0b       	sbc	r23, r19
    19d6:	84 0b       	sbc	r24, r20
    19d8:	ba 0b       	sbc	r27, r26
    19da:	ee 1f       	adc	r30, r30
    19dc:	88 f7       	brcc	.-30     	; 0x19c0 <__divsf3_pse+0x94>
    19de:	e0 95       	com	r30
    19e0:	08 95       	ret

000019e2 <__fixunssfsi>:
    19e2:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__fp_splitA>
    19e6:	88 f0       	brcs	.+34     	; 0x1a0a <__fixunssfsi+0x28>
    19e8:	9f 57       	subi	r25, 0x7F	; 127
    19ea:	98 f0       	brcs	.+38     	; 0x1a12 <__fixunssfsi+0x30>
    19ec:	b9 2f       	mov	r27, r25
    19ee:	99 27       	eor	r25, r25
    19f0:	b7 51       	subi	r27, 0x17	; 23
    19f2:	b0 f0       	brcs	.+44     	; 0x1a20 <__fixunssfsi+0x3e>
    19f4:	e1 f0       	breq	.+56     	; 0x1a2e <__fixunssfsi+0x4c>
    19f6:	66 0f       	add	r22, r22
    19f8:	77 1f       	adc	r23, r23
    19fa:	88 1f       	adc	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	1a f0       	brmi	.+6      	; 0x1a06 <__fixunssfsi+0x24>
    1a00:	ba 95       	dec	r27
    1a02:	c9 f7       	brne	.-14     	; 0x19f6 <__fixunssfsi+0x14>
    1a04:	14 c0       	rjmp	.+40     	; 0x1a2e <__fixunssfsi+0x4c>
    1a06:	b1 30       	cpi	r27, 0x01	; 1
    1a08:	91 f0       	breq	.+36     	; 0x1a2e <__fixunssfsi+0x4c>
    1a0a:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__fp_zero>
    1a0e:	b1 e0       	ldi	r27, 0x01	; 1
    1a10:	08 95       	ret
    1a12:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__fp_zero>
    1a16:	67 2f       	mov	r22, r23
    1a18:	78 2f       	mov	r23, r24
    1a1a:	88 27       	eor	r24, r24
    1a1c:	b8 5f       	subi	r27, 0xF8	; 248
    1a1e:	39 f0       	breq	.+14     	; 0x1a2e <__fixunssfsi+0x4c>
    1a20:	b9 3f       	cpi	r27, 0xF9	; 249
    1a22:	cc f3       	brlt	.-14     	; 0x1a16 <__fixunssfsi+0x34>
    1a24:	86 95       	lsr	r24
    1a26:	77 95       	ror	r23
    1a28:	67 95       	ror	r22
    1a2a:	b3 95       	inc	r27
    1a2c:	d9 f7       	brne	.-10     	; 0x1a24 <__fixunssfsi+0x42>
    1a2e:	3e f4       	brtc	.+14     	; 0x1a3e <__fixunssfsi+0x5c>
    1a30:	90 95       	com	r25
    1a32:	80 95       	com	r24
    1a34:	70 95       	com	r23
    1a36:	61 95       	neg	r22
    1a38:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3e:	08 95       	ret

00001a40 <__floatunsisf>:
    1a40:	e8 94       	clt
    1a42:	09 c0       	rjmp	.+18     	; 0x1a56 <__floatsisf+0x12>

00001a44 <__floatsisf>:
    1a44:	97 fb       	bst	r25, 7
    1a46:	3e f4       	brtc	.+14     	; 0x1a56 <__floatsisf+0x12>
    1a48:	90 95       	com	r25
    1a4a:	80 95       	com	r24
    1a4c:	70 95       	com	r23
    1a4e:	61 95       	neg	r22
    1a50:	7f 4f       	sbci	r23, 0xFF	; 255
    1a52:	8f 4f       	sbci	r24, 0xFF	; 255
    1a54:	9f 4f       	sbci	r25, 0xFF	; 255
    1a56:	99 23       	and	r25, r25
    1a58:	a9 f0       	breq	.+42     	; 0x1a84 <__floatsisf+0x40>
    1a5a:	f9 2f       	mov	r31, r25
    1a5c:	96 e9       	ldi	r25, 0x96	; 150
    1a5e:	bb 27       	eor	r27, r27
    1a60:	93 95       	inc	r25
    1a62:	f6 95       	lsr	r31
    1a64:	87 95       	ror	r24
    1a66:	77 95       	ror	r23
    1a68:	67 95       	ror	r22
    1a6a:	b7 95       	ror	r27
    1a6c:	f1 11       	cpse	r31, r1
    1a6e:	f8 cf       	rjmp	.-16     	; 0x1a60 <__floatsisf+0x1c>
    1a70:	fa f4       	brpl	.+62     	; 0x1ab0 <__floatsisf+0x6c>
    1a72:	bb 0f       	add	r27, r27
    1a74:	11 f4       	brne	.+4      	; 0x1a7a <__floatsisf+0x36>
    1a76:	60 ff       	sbrs	r22, 0
    1a78:	1b c0       	rjmp	.+54     	; 0x1ab0 <__floatsisf+0x6c>
    1a7a:	6f 5f       	subi	r22, 0xFF	; 255
    1a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a80:	9f 4f       	sbci	r25, 0xFF	; 255
    1a82:	16 c0       	rjmp	.+44     	; 0x1ab0 <__floatsisf+0x6c>
    1a84:	88 23       	and	r24, r24
    1a86:	11 f0       	breq	.+4      	; 0x1a8c <__floatsisf+0x48>
    1a88:	96 e9       	ldi	r25, 0x96	; 150
    1a8a:	11 c0       	rjmp	.+34     	; 0x1aae <__floatsisf+0x6a>
    1a8c:	77 23       	and	r23, r23
    1a8e:	21 f0       	breq	.+8      	; 0x1a98 <__floatsisf+0x54>
    1a90:	9e e8       	ldi	r25, 0x8E	; 142
    1a92:	87 2f       	mov	r24, r23
    1a94:	76 2f       	mov	r23, r22
    1a96:	05 c0       	rjmp	.+10     	; 0x1aa2 <__floatsisf+0x5e>
    1a98:	66 23       	and	r22, r22
    1a9a:	71 f0       	breq	.+28     	; 0x1ab8 <__floatsisf+0x74>
    1a9c:	96 e8       	ldi	r25, 0x86	; 134
    1a9e:	86 2f       	mov	r24, r22
    1aa0:	70 e0       	ldi	r23, 0x00	; 0
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	2a f0       	brmi	.+10     	; 0x1ab0 <__floatsisf+0x6c>
    1aa6:	9a 95       	dec	r25
    1aa8:	66 0f       	add	r22, r22
    1aaa:	77 1f       	adc	r23, r23
    1aac:	88 1f       	adc	r24, r24
    1aae:	da f7       	brpl	.-10     	; 0x1aa6 <__floatsisf+0x62>
    1ab0:	88 0f       	add	r24, r24
    1ab2:	96 95       	lsr	r25
    1ab4:	87 95       	ror	r24
    1ab6:	97 f9       	bld	r25, 7
    1ab8:	08 95       	ret

00001aba <__fp_inf>:
    1aba:	97 f9       	bld	r25, 7
    1abc:	9f 67       	ori	r25, 0x7F	; 127
    1abe:	80 e8       	ldi	r24, 0x80	; 128
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	08 95       	ret

00001ac6 <__fp_nan>:
    1ac6:	9f ef       	ldi	r25, 0xFF	; 255
    1ac8:	80 ec       	ldi	r24, 0xC0	; 192
    1aca:	08 95       	ret

00001acc <__fp_pscA>:
    1acc:	00 24       	eor	r0, r0
    1ace:	0a 94       	dec	r0
    1ad0:	16 16       	cp	r1, r22
    1ad2:	17 06       	cpc	r1, r23
    1ad4:	18 06       	cpc	r1, r24
    1ad6:	09 06       	cpc	r0, r25
    1ad8:	08 95       	ret

00001ada <__fp_pscB>:
    1ada:	00 24       	eor	r0, r0
    1adc:	0a 94       	dec	r0
    1ade:	12 16       	cp	r1, r18
    1ae0:	13 06       	cpc	r1, r19
    1ae2:	14 06       	cpc	r1, r20
    1ae4:	05 06       	cpc	r0, r21
    1ae6:	08 95       	ret

00001ae8 <__fp_round>:
    1ae8:	09 2e       	mov	r0, r25
    1aea:	03 94       	inc	r0
    1aec:	00 0c       	add	r0, r0
    1aee:	11 f4       	brne	.+4      	; 0x1af4 <__fp_round+0xc>
    1af0:	88 23       	and	r24, r24
    1af2:	52 f0       	brmi	.+20     	; 0x1b08 <__fp_round+0x20>
    1af4:	bb 0f       	add	r27, r27
    1af6:	40 f4       	brcc	.+16     	; 0x1b08 <__fp_round+0x20>
    1af8:	bf 2b       	or	r27, r31
    1afa:	11 f4       	brne	.+4      	; 0x1b00 <__fp_round+0x18>
    1afc:	60 ff       	sbrs	r22, 0
    1afe:	04 c0       	rjmp	.+8      	; 0x1b08 <__fp_round+0x20>
    1b00:	6f 5f       	subi	r22, 0xFF	; 255
    1b02:	7f 4f       	sbci	r23, 0xFF	; 255
    1b04:	8f 4f       	sbci	r24, 0xFF	; 255
    1b06:	9f 4f       	sbci	r25, 0xFF	; 255
    1b08:	08 95       	ret

00001b0a <__fp_split3>:
    1b0a:	57 fd       	sbrc	r21, 7
    1b0c:	90 58       	subi	r25, 0x80	; 128
    1b0e:	44 0f       	add	r20, r20
    1b10:	55 1f       	adc	r21, r21
    1b12:	59 f0       	breq	.+22     	; 0x1b2a <__fp_splitA+0x10>
    1b14:	5f 3f       	cpi	r21, 0xFF	; 255
    1b16:	71 f0       	breq	.+28     	; 0x1b34 <__fp_splitA+0x1a>
    1b18:	47 95       	ror	r20

00001b1a <__fp_splitA>:
    1b1a:	88 0f       	add	r24, r24
    1b1c:	97 fb       	bst	r25, 7
    1b1e:	99 1f       	adc	r25, r25
    1b20:	61 f0       	breq	.+24     	; 0x1b3a <__fp_splitA+0x20>
    1b22:	9f 3f       	cpi	r25, 0xFF	; 255
    1b24:	79 f0       	breq	.+30     	; 0x1b44 <__fp_splitA+0x2a>
    1b26:	87 95       	ror	r24
    1b28:	08 95       	ret
    1b2a:	12 16       	cp	r1, r18
    1b2c:	13 06       	cpc	r1, r19
    1b2e:	14 06       	cpc	r1, r20
    1b30:	55 1f       	adc	r21, r21
    1b32:	f2 cf       	rjmp	.-28     	; 0x1b18 <__fp_split3+0xe>
    1b34:	46 95       	lsr	r20
    1b36:	f1 df       	rcall	.-30     	; 0x1b1a <__fp_splitA>
    1b38:	08 c0       	rjmp	.+16     	; 0x1b4a <__fp_splitA+0x30>
    1b3a:	16 16       	cp	r1, r22
    1b3c:	17 06       	cpc	r1, r23
    1b3e:	18 06       	cpc	r1, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	f1 cf       	rjmp	.-30     	; 0x1b26 <__fp_splitA+0xc>
    1b44:	86 95       	lsr	r24
    1b46:	71 05       	cpc	r23, r1
    1b48:	61 05       	cpc	r22, r1
    1b4a:	08 94       	sec
    1b4c:	08 95       	ret

00001b4e <__fp_zero>:
    1b4e:	e8 94       	clt

00001b50 <__fp_szero>:
    1b50:	bb 27       	eor	r27, r27
    1b52:	66 27       	eor	r22, r22
    1b54:	77 27       	eor	r23, r23
    1b56:	cb 01       	movw	r24, r22
    1b58:	97 f9       	bld	r25, 7
    1b5a:	08 95       	ret

00001b5c <__mulsf3>:
    1b5c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3x>
    1b60:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__fp_round>
    1b64:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__fp_pscA>
    1b68:	38 f0       	brcs	.+14     	; 0x1b78 <__mulsf3+0x1c>
    1b6a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__fp_pscB>
    1b6e:	20 f0       	brcs	.+8      	; 0x1b78 <__mulsf3+0x1c>
    1b70:	95 23       	and	r25, r21
    1b72:	11 f0       	breq	.+4      	; 0x1b78 <__mulsf3+0x1c>
    1b74:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__fp_inf>
    1b78:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__fp_nan>
    1b7c:	11 24       	eor	r1, r1
    1b7e:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__fp_szero>

00001b82 <__mulsf3x>:
    1b82:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__fp_split3>
    1b86:	70 f3       	brcs	.-36     	; 0x1b64 <__mulsf3+0x8>

00001b88 <__mulsf3_pse>:
    1b88:	95 9f       	mul	r25, r21
    1b8a:	c1 f3       	breq	.-16     	; 0x1b7c <__mulsf3+0x20>
    1b8c:	95 0f       	add	r25, r21
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	55 1f       	adc	r21, r21
    1b92:	62 9f       	mul	r22, r18
    1b94:	f0 01       	movw	r30, r0
    1b96:	72 9f       	mul	r23, r18
    1b98:	bb 27       	eor	r27, r27
    1b9a:	f0 0d       	add	r31, r0
    1b9c:	b1 1d       	adc	r27, r1
    1b9e:	63 9f       	mul	r22, r19
    1ba0:	aa 27       	eor	r26, r26
    1ba2:	f0 0d       	add	r31, r0
    1ba4:	b1 1d       	adc	r27, r1
    1ba6:	aa 1f       	adc	r26, r26
    1ba8:	64 9f       	mul	r22, r20
    1baa:	66 27       	eor	r22, r22
    1bac:	b0 0d       	add	r27, r0
    1bae:	a1 1d       	adc	r26, r1
    1bb0:	66 1f       	adc	r22, r22
    1bb2:	82 9f       	mul	r24, r18
    1bb4:	22 27       	eor	r18, r18
    1bb6:	b0 0d       	add	r27, r0
    1bb8:	a1 1d       	adc	r26, r1
    1bba:	62 1f       	adc	r22, r18
    1bbc:	73 9f       	mul	r23, r19
    1bbe:	b0 0d       	add	r27, r0
    1bc0:	a1 1d       	adc	r26, r1
    1bc2:	62 1f       	adc	r22, r18
    1bc4:	83 9f       	mul	r24, r19
    1bc6:	a0 0d       	add	r26, r0
    1bc8:	61 1d       	adc	r22, r1
    1bca:	22 1f       	adc	r18, r18
    1bcc:	74 9f       	mul	r23, r20
    1bce:	33 27       	eor	r19, r19
    1bd0:	a0 0d       	add	r26, r0
    1bd2:	61 1d       	adc	r22, r1
    1bd4:	23 1f       	adc	r18, r19
    1bd6:	84 9f       	mul	r24, r20
    1bd8:	60 0d       	add	r22, r0
    1bda:	21 1d       	adc	r18, r1
    1bdc:	82 2f       	mov	r24, r18
    1bde:	76 2f       	mov	r23, r22
    1be0:	6a 2f       	mov	r22, r26
    1be2:	11 24       	eor	r1, r1
    1be4:	9f 57       	subi	r25, 0x7F	; 127
    1be6:	50 40       	sbci	r21, 0x00	; 0
    1be8:	9a f0       	brmi	.+38     	; 0x1c10 <__mulsf3_pse+0x88>
    1bea:	f1 f0       	breq	.+60     	; 0x1c28 <__mulsf3_pse+0xa0>
    1bec:	88 23       	and	r24, r24
    1bee:	4a f0       	brmi	.+18     	; 0x1c02 <__mulsf3_pse+0x7a>
    1bf0:	ee 0f       	add	r30, r30
    1bf2:	ff 1f       	adc	r31, r31
    1bf4:	bb 1f       	adc	r27, r27
    1bf6:	66 1f       	adc	r22, r22
    1bf8:	77 1f       	adc	r23, r23
    1bfa:	88 1f       	adc	r24, r24
    1bfc:	91 50       	subi	r25, 0x01	; 1
    1bfe:	50 40       	sbci	r21, 0x00	; 0
    1c00:	a9 f7       	brne	.-22     	; 0x1bec <__mulsf3_pse+0x64>
    1c02:	9e 3f       	cpi	r25, 0xFE	; 254
    1c04:	51 05       	cpc	r21, r1
    1c06:	80 f0       	brcs	.+32     	; 0x1c28 <__mulsf3_pse+0xa0>
    1c08:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__fp_inf>
    1c0c:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__fp_szero>
    1c10:	5f 3f       	cpi	r21, 0xFF	; 255
    1c12:	e4 f3       	brlt	.-8      	; 0x1c0c <__mulsf3_pse+0x84>
    1c14:	98 3e       	cpi	r25, 0xE8	; 232
    1c16:	d4 f3       	brlt	.-12     	; 0x1c0c <__mulsf3_pse+0x84>
    1c18:	86 95       	lsr	r24
    1c1a:	77 95       	ror	r23
    1c1c:	67 95       	ror	r22
    1c1e:	b7 95       	ror	r27
    1c20:	f7 95       	ror	r31
    1c22:	e7 95       	ror	r30
    1c24:	9f 5f       	subi	r25, 0xFF	; 255
    1c26:	c1 f7       	brne	.-16     	; 0x1c18 <__mulsf3_pse+0x90>
    1c28:	fe 2b       	or	r31, r30
    1c2a:	88 0f       	add	r24, r24
    1c2c:	91 1d       	adc	r25, r1
    1c2e:	96 95       	lsr	r25
    1c30:	87 95       	ror	r24
    1c32:	97 f9       	bld	r25, 7
    1c34:	08 95       	ret

00001c36 <__udivmodsi4>:
    1c36:	a1 e2       	ldi	r26, 0x21	; 33
    1c38:	1a 2e       	mov	r1, r26
    1c3a:	aa 1b       	sub	r26, r26
    1c3c:	bb 1b       	sub	r27, r27
    1c3e:	fd 01       	movw	r30, r26
    1c40:	0d c0       	rjmp	.+26     	; 0x1c5c <__udivmodsi4_ep>

00001c42 <__udivmodsi4_loop>:
    1c42:	aa 1f       	adc	r26, r26
    1c44:	bb 1f       	adc	r27, r27
    1c46:	ee 1f       	adc	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	a2 17       	cp	r26, r18
    1c4c:	b3 07       	cpc	r27, r19
    1c4e:	e4 07       	cpc	r30, r20
    1c50:	f5 07       	cpc	r31, r21
    1c52:	20 f0       	brcs	.+8      	; 0x1c5c <__udivmodsi4_ep>
    1c54:	a2 1b       	sub	r26, r18
    1c56:	b3 0b       	sbc	r27, r19
    1c58:	e4 0b       	sbc	r30, r20
    1c5a:	f5 0b       	sbc	r31, r21

00001c5c <__udivmodsi4_ep>:
    1c5c:	66 1f       	adc	r22, r22
    1c5e:	77 1f       	adc	r23, r23
    1c60:	88 1f       	adc	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	1a 94       	dec	r1
    1c66:	69 f7       	brne	.-38     	; 0x1c42 <__udivmodsi4_loop>
    1c68:	60 95       	com	r22
    1c6a:	70 95       	com	r23
    1c6c:	80 95       	com	r24
    1c6e:	90 95       	com	r25
    1c70:	9b 01       	movw	r18, r22
    1c72:	ac 01       	movw	r20, r24
    1c74:	bd 01       	movw	r22, r26
    1c76:	cf 01       	movw	r24, r30
    1c78:	08 95       	ret

00001c7a <__umulhisi3>:
    1c7a:	a2 9f       	mul	r26, r18
    1c7c:	b0 01       	movw	r22, r0
    1c7e:	b3 9f       	mul	r27, r19
    1c80:	c0 01       	movw	r24, r0
    1c82:	a3 9f       	mul	r26, r19
    1c84:	70 0d       	add	r23, r0
    1c86:	81 1d       	adc	r24, r1
    1c88:	11 24       	eor	r1, r1
    1c8a:	91 1d       	adc	r25, r1
    1c8c:	b2 9f       	mul	r27, r18
    1c8e:	70 0d       	add	r23, r0
    1c90:	81 1d       	adc	r24, r1
    1c92:	11 24       	eor	r1, r1
    1c94:	91 1d       	adc	r25, r1
    1c96:	08 95       	ret

00001c98 <_exit>:
    1c98:	f8 94       	cli

00001c9a <__stop_program>:
    1c9a:	ff cf       	rjmp	.-2      	; 0x1c9a <__stop_program>
